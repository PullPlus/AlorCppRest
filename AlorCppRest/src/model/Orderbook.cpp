/**
 * Alor OpenAPI V2
 * API для работы с торговой системой АЛОР Брокер. Предоставляет интерфейсы для выставления заявок и получения биржевой информации.  Данные для неавторизованных запросов предоставляются с задержкой от 15 минут, для авторизованных - без задержек.   Публичная биржевая информация может быть получена через HTTP(S) API, а также доступна через однократно установленное WebSocket соединение. <br> **Внимание!** WebSocket соединения могут и будут разрываться *(например, если клиент не успевает обрабатывать сообщения и на стороне API в буфере накопится более 5000 событий)*. <br> Во внешнем ПО необходимо предусмотреть механизмы переподключения и переподписки (при необходимости)! <br> <br>  В OpenAPI V2 доступны \"Московская Биржа\" (MOEX) и \"Биржа СПБ\" (SPBX).   <h4> Доступные типы данных </h4>  * Все сделки  * Все заявки  * Информация по инструментам  * Котировки  * Биржевые стаканы  * Исторические данные  * Позиции  * Информация о клиенте  <h4>Поддерживаемые виды заявок</h4>  * рыночные  * лимитные  * стоп-лосс  * тейк-профит  * стоп-лосс лимит  * тейк-профит лимит  <h4>    Ограничения по частоте запросов     </h4> <p>На текущий момент ограничений по количеству запросов в минуту нет, однако есть ограничение на общее количество подписок (сотни тысяч). При достижении лимита подписок клиент будет заблокирован и в течение нескольких минут не сможет создавать новые подписки. Уже существующие подписки продолжат работать. <br/>  Сервер может обрабатывать \"тяжелые\" запросы (пример - история за все время) и запросы без авторизации с меньшим приоритетом.<br/> </p>  <h4>Получение списка портфелей</h4> <p>Получить список доступных портфелей можно из JWT токена</p> <p>Для получения списка доступных портфелей необходимо декодировать JWT токен. Портфели находятся в поле <b>portfolios</b>.</p> <br/>  <h2> Авторизация </h2>  <h4>OAuth</h4>  <b>Внимание!</b>   JWT и refresh token — равносильны логину и паролю. Их нужно скрывать от публичного доступа.  <h4>Для разработчиков сторонних приложений, в которых торговлю будут вести их пользователи.</h4>  Мы предоставляем сервис для авторизации сторониих приложений по стандарту OAuth 2.0. С примером приложения, использующего OAuth сервис для авторизации пользователей можно ознакомиться в разделе  <a href=\"/examples\">Примеры</a>.  Список разрешений (scopes), которые могут быть выданы приложению: <table>   <tr>     <td><b>OrdersRead</b></td>     <td>Чтение выставленных заявок</td>   </tr>   <tr>     <td><b>OrdersCreate</b></td>     <td>Выставление заявок</td>   </tr>   <tr>     <td><b>Trades</b></td>     <td>Чтение совершенных сделок</td>   </tr>   <tr>     <td><b>Personal</b></td>     <td>Персональная информация: ФИО, почта и т.п.</td>   </tr>   <tr>     <td><b>Stats</b></td>     <td>Статистика: прибыль, средние цены и т.п.</td>   </tr> </table>  <h4>Для ведения операций от своего имени</h4>  Выписать себе <b>refresh token</b> для ведения операций от своего имени [можно здесь](https://alor.dev/open-api-tokens).  <h2>Краткое описание работы с авторизацией</h2>  Чтобы выполнить авторизованный запрос, добавьте в запрос заголовок с именем \"Authorization\" и значением, состоящим из префикса `\"Bearer \"` и валидного JWT токена.  Срок жизни JWT короткий: это сделано для безопасности.  Для большинства вариантов использования API мы рекоммендуем использовать механизм  <b>refresh token</b> .  Механизм  <b>refresh token</b>  позволяет получать JWT с новым сроком жизни. Для этого отправьте POST запрос на адрес `https://oauthdev.alor.ru/refresh?token={refreshToken}` *(тестовый контур)* или `https://oauth.alor.ru/refresh?token={refreshToken}` *(боевой контур)*. Если у  <b>refresh token</b>  не истек срок жизни и не он не был отозван, то в теле ответа в поле AccessToken вернётся свежий JWT токен.   Срок жизни  <b>refresh token</b>, получаемого обычным способом — 1 месяц.   Срок жизни  <b>refresh token</b>, получаемого самостоятельным выписыванием — год.  | |-  > Если мы для вас не завели портфели для ведения торговли в игровом контуре, оставьте заявку на <a href=\"mailto:openapi@alor.ru\">openapi@alor.ru</a> или свяжитесь с нами в [телеграме](https://t.me/AlorOpenAPI).  </br></br> Тестовый контур: `https://apidev.alor.ru`  Боевой контур: `https://api.alor.ru` 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: openapi@alor.ru
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "AlorCppRest/model/Orderbook.h"

namespace alormodel {



Orderbook::Orderbook()
{
    m_Snapshot = false;
    m_SnapshotIsSet = false;
    m_BidsIsSet = false;
    m_AsksIsSet = false;
    m_Timestamp = 0.0;
    m_TimestampIsSet = false;
    m_Ms_timestamp = 0L;
    m_Ms_timestampIsSet = false;
    m_Existing = false;
    m_ExistingIsSet = false;
}

Orderbook::~Orderbook()
{
}

void Orderbook::validate()
{
    // TODO: implement validation
}

web::json::value Orderbook::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_SnapshotIsSet)
    {
        val[utility::conversions::to_string_t(U("snapshot"))] = ModelBase::toJson(m_Snapshot);
    }
    if(m_BidsIsSet)
    {
        val[utility::conversions::to_string_t(U("bids"))] = ModelBase::toJson(m_Bids);
    }
    if(m_AsksIsSet)
    {
        val[utility::conversions::to_string_t(U("asks"))] = ModelBase::toJson(m_Asks);
    }
    if(m_TimestampIsSet)
    {
        val[utility::conversions::to_string_t(U("timestamp"))] = ModelBase::toJson(m_Timestamp);
    }
    if(m_Ms_timestampIsSet)
    {
        val[utility::conversions::to_string_t(U("ms_timestamp"))] = ModelBase::toJson(m_Ms_timestamp);
    }
    if(m_ExistingIsSet)
    {
        val[utility::conversions::to_string_t(U("existing"))] = ModelBase::toJson(m_Existing);
    }

    return val;
}

bool Orderbook::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("snapshot"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("snapshot")));
        if(!fieldValue.is_null())
        {
            bool refVal_setSnapshot;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSnapshot);
            setSnapshot(refVal_setSnapshot);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bids"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bids")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Orderbook_bid>> refVal_setBids;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBids);
            setBids(refVal_setBids);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("asks"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("asks")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Orderbook_ask>> refVal_setAsks;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAsks);
            setAsks(refVal_setAsks);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("timestamp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("timestamp")));
        if(!fieldValue.is_null())
        {
            double refVal_setTimestamp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimestamp);
            setTimestamp(refVal_setTimestamp);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ms_timestamp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ms_timestamp")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setMsTimestamp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMsTimestamp);
            setMsTimestamp(refVal_setMsTimestamp);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("existing"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("existing")));
        if(!fieldValue.is_null())
        {
            bool refVal_setExisting;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExisting);
            setExisting(refVal_setExisting);
        }
    }
    return ok;
}

void Orderbook::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_SnapshotIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("snapshot")), m_Snapshot));
    }
    if(m_BidsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bids")), m_Bids));
    }
    if(m_AsksIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("asks")), m_Asks));
    }
    if(m_TimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("timestamp")), m_Timestamp));
    }
    if(m_Ms_timestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ms_timestamp")), m_Ms_timestamp));
    }
    if(m_ExistingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("existing")), m_Existing));
    }
}

bool Orderbook::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("snapshot"))))
    {
        bool refVal_setSnapshot;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("snapshot"))), refVal_setSnapshot );
        setSnapshot(refVal_setSnapshot);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bids"))))
    {
        std::vector<std::shared_ptr<Orderbook_bid>> refVal_setBids;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bids"))), refVal_setBids );
        setBids(refVal_setBids);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("asks"))))
    {
        std::vector<std::shared_ptr<Orderbook_ask>> refVal_setAsks;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("asks"))), refVal_setAsks );
        setAsks(refVal_setAsks);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("timestamp"))))
    {
        double refVal_setTimestamp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("timestamp"))), refVal_setTimestamp );
        setTimestamp(refVal_setTimestamp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ms_timestamp"))))
    {
        int64_t refVal_setMsTimestamp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ms_timestamp"))), refVal_setMsTimestamp );
        setMsTimestamp(refVal_setMsTimestamp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("existing"))))
    {
        bool refVal_setExisting;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("existing"))), refVal_setExisting );
        setExisting(refVal_setExisting);
    }
    return ok;
}

bool Orderbook::isSnapshot() const
{
    return m_Snapshot;
}

void Orderbook::setSnapshot(bool value)
{
    m_Snapshot = value;
    m_SnapshotIsSet = true;
}

bool Orderbook::snapshotIsSet() const
{
    return m_SnapshotIsSet;
}

void Orderbook::unsetSnapshot()
{
    m_SnapshotIsSet = false;
}
std::vector<std::shared_ptr<Orderbook_bid>>& Orderbook::getBids()
{
    return m_Bids;
}

void Orderbook::setBids(const std::vector<std::shared_ptr<Orderbook_bid>>& value)
{
    m_Bids = value;
    m_BidsIsSet = true;
}

bool Orderbook::bidsIsSet() const
{
    return m_BidsIsSet;
}

void Orderbook::unsetBids()
{
    m_BidsIsSet = false;
}
std::vector<std::shared_ptr<Orderbook_ask>>& Orderbook::getAsks()
{
    return m_Asks;
}

void Orderbook::setAsks(const std::vector<std::shared_ptr<Orderbook_ask>>& value)
{
    m_Asks = value;
    m_AsksIsSet = true;
}

bool Orderbook::asksIsSet() const
{
    return m_AsksIsSet;
}

void Orderbook::unsetAsks()
{
    m_AsksIsSet = false;
}
double Orderbook::getTimestamp() const
{
    return m_Timestamp;
}

void Orderbook::setTimestamp(double value)
{
    m_Timestamp = value;
    m_TimestampIsSet = true;
}

bool Orderbook::timestampIsSet() const
{
    return m_TimestampIsSet;
}

void Orderbook::unsetTimestamp()
{
    m_TimestampIsSet = false;
}
int64_t Orderbook::getMsTimestamp() const
{
    return m_Ms_timestamp;
}

void Orderbook::setMsTimestamp(int64_t value)
{
    m_Ms_timestamp = value;
    m_Ms_timestampIsSet = true;
}

bool Orderbook::msTimestampIsSet() const
{
    return m_Ms_timestampIsSet;
}

void Orderbook::unsetMs_timestamp()
{
    m_Ms_timestampIsSet = false;
}
bool Orderbook::isExisting() const
{
    return m_Existing;
}

void Orderbook::setExisting(bool value)
{
    m_Existing = value;
    m_ExistingIsSet = true;
}

bool Orderbook::existingIsSet() const
{
    return m_ExistingIsSet;
}

void Orderbook::unsetExisting()
{
    m_ExistingIsSet = false;
}
}



/**
 * Alor OpenAPI V2
 * API для работы с торговой системой АЛОР Брокер. Предоставляет интерфейсы для выставления заявок и получения биржевой информации.  Данные для неавторизованных запросов предоставляются с задержкой от 15 минут, для авторизованных - без задержек.   Публичная биржевая информация может быть получена через HTTP(S) API, а также доступна через однократно установленное WebSocket соединение. <br> **Внимание!** WebSocket соединения могут и будут разрываться *(например, если клиент не успевает обрабатывать сообщения и на стороне API в буфере накопится более 5000 событий)*. <br> Во внешнем ПО необходимо предусмотреть механизмы переподключения и переподписки (при необходимости)! <br> <br>  В OpenAPI V2 доступны \"Московская Биржа\" (MOEX) и \"Биржа СПБ\" (SPBX).   <h4> Доступные типы данных </h4>  * Все сделки  * Все заявки  * Информация по инструментам  * Котировки  * Биржевые стаканы  * Исторические данные  * Позиции  * Информация о клиенте  <h4>Поддерживаемые виды заявок</h4>  * рыночные  * лимитные  * стоп-лосс  * тейк-профит  * стоп-лосс лимит  * тейк-профит лимит  <h4>    Ограничения по частоте запросов     </h4> <p>На текущий момент ограничений по количеству запросов в минуту нет, однако есть ограничение на общее количество подписок (сотни тысяч). При достижении лимита подписок клиент будет заблокирован и в течение нескольких минут не сможет создавать новые подписки. Уже существующие подписки продолжат работать. <br/>  Сервер может обрабатывать \"тяжелые\" запросы (пример - история за все время) и запросы без авторизации с меньшим приоритетом.<br/> </p>  <h4>Получение списка портфелей</h4> <p>Получить список доступных портфелей можно из JWT токена</p> <p>Для получения списка доступных портфелей необходимо декодировать JWT токен. Портфели находятся в поле <b>portfolios</b>.</p> <br/>  <h2> Авторизация </h2>  <h4>OAuth</h4>  <b>Внимание!</b>   JWT и refresh token — равносильны логину и паролю. Их нужно скрывать от публичного доступа.  <h4>Для разработчиков сторонних приложений, в которых торговлю будут вести их пользователи.</h4>  Мы предоставляем сервис для авторизации сторониих приложений по стандарту OAuth 2.0. С примером приложения, использующего OAuth сервис для авторизации пользователей можно ознакомиться в разделе  <a href=\"/examples\">Примеры</a>.  Список разрешений (scopes), которые могут быть выданы приложению: <table>   <tr>     <td><b>OrdersRead</b></td>     <td>Чтение выставленных заявок</td>   </tr>   <tr>     <td><b>OrdersCreate</b></td>     <td>Выставление заявок</td>   </tr>   <tr>     <td><b>Trades</b></td>     <td>Чтение совершенных сделок</td>   </tr>   <tr>     <td><b>Personal</b></td>     <td>Персональная информация: ФИО, почта и т.п.</td>   </tr>   <tr>     <td><b>Stats</b></td>     <td>Статистика: прибыль, средние цены и т.п.</td>   </tr> </table>  <h4>Для ведения операций от своего имени</h4>  Выписать себе <b>refresh token</b> для ведения операций от своего имени [можно здесь](https://alor.dev/open-api-tokens).  <h2>Краткое описание работы с авторизацией</h2>  Чтобы выполнить авторизованный запрос, добавьте в запрос заголовок с именем \"Authorization\" и значением, состоящим из префикса `\"Bearer \"` и валидного JWT токена.  Срок жизни JWT короткий: это сделано для безопасности.  Для большинства вариантов использования API мы рекоммендуем использовать механизм  <b>refresh token</b> .  Механизм  <b>refresh token</b>  позволяет получать JWT с новым сроком жизни. Для этого отправьте POST запрос на адрес `https://oauthdev.alor.ru/refresh?token={refreshToken}` *(тестовый контур)* или `https://oauth.alor.ru/refresh?token={refreshToken}` *(боевой контур)*. Если у  <b>refresh token</b>  не истек срок жизни и не он не был отозван, то в теле ответа в поле AccessToken вернётся свежий JWT токен.   Срок жизни  <b>refresh token</b>, получаемого обычным способом — 1 месяц.   Срок жизни  <b>refresh token</b>, получаемого самостоятельным выписыванием — год.  | |-  > Если мы для вас не завели портфели для ведения торговли в игровом контуре, оставьте заявку на <a href=\"mailto:openapi@alor.ru\">openapi@alor.ru</a> или свяжитесь с нами в [телеграме](https://t.me/AlorOpenAPI).  </br></br> Тестовый контур: `https://apidev.alor.ru`  Боевой контур: `https://api.alor.ru` 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: openapi@alor.ru
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "AlorCppRest/model/EstimateOrderModel.h"

namespace alormodel {



EstimateOrderModel::EstimateOrderModel()
{
    m_Portfolio = utility::conversions::to_string_t("");
    m_PortfolioIsSet = false;
    m_Ticker = utility::conversions::to_string_t("");
    m_TickerIsSet = false;
    m_ExchangeIsSet = false;
    m_QuantityToSell = 0.0;
    m_QuantityToSellIsSet = false;
    m_QuantityToBuy = 0.0;
    m_QuantityToBuyIsSet = false;
    m_NotMarginQuantityToSell = 0.0;
    m_NotMarginQuantityToSellIsSet = false;
    m_NotMarginQuantityToBuy = 0.0;
    m_NotMarginQuantityToBuyIsSet = false;
    m_OrderEvaluation = 0.0;
    m_OrderEvaluationIsSet = false;
    m_Commission = 0.0;
    m_CommissionIsSet = false;
}

EstimateOrderModel::~EstimateOrderModel()
{
}

void EstimateOrderModel::validate()
{
    // TODO: implement validation
}

web::json::value EstimateOrderModel::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_PortfolioIsSet)
    {
        val[utility::conversions::to_string_t(U("portfolio"))] = ModelBase::toJson(m_Portfolio);
    }
    if(m_TickerIsSet)
    {
        val[utility::conversions::to_string_t(U("ticker"))] = ModelBase::toJson(m_Ticker);
    }
    if(m_ExchangeIsSet)
    {
        val[utility::conversions::to_string_t(U("exchange"))] = ModelBase::toJson(m_Exchange);
    }
    if(m_QuantityToSellIsSet)
    {
        val[utility::conversions::to_string_t(U("quantityToSell"))] = ModelBase::toJson(m_QuantityToSell);
    }
    if(m_QuantityToBuyIsSet)
    {
        val[utility::conversions::to_string_t(U("quantityToBuy"))] = ModelBase::toJson(m_QuantityToBuy);
    }
    if(m_NotMarginQuantityToSellIsSet)
    {
        val[utility::conversions::to_string_t(U("notMarginQuantityToSell"))] = ModelBase::toJson(m_NotMarginQuantityToSell);
    }
    if(m_NotMarginQuantityToBuyIsSet)
    {
        val[utility::conversions::to_string_t(U("notMarginQuantityToBuy"))] = ModelBase::toJson(m_NotMarginQuantityToBuy);
    }
    if(m_OrderEvaluationIsSet)
    {
        val[utility::conversions::to_string_t(U("orderEvaluation"))] = ModelBase::toJson(m_OrderEvaluation);
    }
    if(m_CommissionIsSet)
    {
        val[utility::conversions::to_string_t(U("commission"))] = ModelBase::toJson(m_Commission);
    }

    return val;
}

bool EstimateOrderModel::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("portfolio"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("portfolio")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPortfolio;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPortfolio);
            setPortfolio(refVal_setPortfolio);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ticker"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ticker")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTicker;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTicker);
            setTicker(refVal_setTicker);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("exchange"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("exchange")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Exchange> refVal_setExchange;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExchange);
            setExchange(refVal_setExchange);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("quantityToSell"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("quantityToSell")));
        if(!fieldValue.is_null())
        {
            double refVal_setQuantityToSell;
            ok &= ModelBase::fromJson(fieldValue, refVal_setQuantityToSell);
            setQuantityToSell(refVal_setQuantityToSell);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("quantityToBuy"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("quantityToBuy")));
        if(!fieldValue.is_null())
        {
            double refVal_setQuantityToBuy;
            ok &= ModelBase::fromJson(fieldValue, refVal_setQuantityToBuy);
            setQuantityToBuy(refVal_setQuantityToBuy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("notMarginQuantityToSell"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("notMarginQuantityToSell")));
        if(!fieldValue.is_null())
        {
            double refVal_setNotMarginQuantityToSell;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNotMarginQuantityToSell);
            setNotMarginQuantityToSell(refVal_setNotMarginQuantityToSell);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("notMarginQuantityToBuy"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("notMarginQuantityToBuy")));
        if(!fieldValue.is_null())
        {
            double refVal_setNotMarginQuantityToBuy;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNotMarginQuantityToBuy);
            setNotMarginQuantityToBuy(refVal_setNotMarginQuantityToBuy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("orderEvaluation"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("orderEvaluation")));
        if(!fieldValue.is_null())
        {
            double refVal_setOrderEvaluation;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOrderEvaluation);
            setOrderEvaluation(refVal_setOrderEvaluation);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("commission"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("commission")));
        if(!fieldValue.is_null())
        {
            double refVal_setCommission;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCommission);
            setCommission(refVal_setCommission);
        }
    }
    return ok;
}

void EstimateOrderModel::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_PortfolioIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("portfolio")), m_Portfolio));
    }
    if(m_TickerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ticker")), m_Ticker));
    }
    if(m_ExchangeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("exchange")), m_Exchange));
    }
    if(m_QuantityToSellIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("quantityToSell")), m_QuantityToSell));
    }
    if(m_QuantityToBuyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("quantityToBuy")), m_QuantityToBuy));
    }
    if(m_NotMarginQuantityToSellIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("notMarginQuantityToSell")), m_NotMarginQuantityToSell));
    }
    if(m_NotMarginQuantityToBuyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("notMarginQuantityToBuy")), m_NotMarginQuantityToBuy));
    }
    if(m_OrderEvaluationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("orderEvaluation")), m_OrderEvaluation));
    }
    if(m_CommissionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("commission")), m_Commission));
    }
}

bool EstimateOrderModel::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("portfolio"))))
    {
        utility::string_t refVal_setPortfolio;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("portfolio"))), refVal_setPortfolio );
        setPortfolio(refVal_setPortfolio);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ticker"))))
    {
        utility::string_t refVal_setTicker;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ticker"))), refVal_setTicker );
        setTicker(refVal_setTicker);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("exchange"))))
    {
        std::shared_ptr<Exchange> refVal_setExchange;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("exchange"))), refVal_setExchange );
        setExchange(refVal_setExchange);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("quantityToSell"))))
    {
        double refVal_setQuantityToSell;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("quantityToSell"))), refVal_setQuantityToSell );
        setQuantityToSell(refVal_setQuantityToSell);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("quantityToBuy"))))
    {
        double refVal_setQuantityToBuy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("quantityToBuy"))), refVal_setQuantityToBuy );
        setQuantityToBuy(refVal_setQuantityToBuy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("notMarginQuantityToSell"))))
    {
        double refVal_setNotMarginQuantityToSell;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("notMarginQuantityToSell"))), refVal_setNotMarginQuantityToSell );
        setNotMarginQuantityToSell(refVal_setNotMarginQuantityToSell);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("notMarginQuantityToBuy"))))
    {
        double refVal_setNotMarginQuantityToBuy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("notMarginQuantityToBuy"))), refVal_setNotMarginQuantityToBuy );
        setNotMarginQuantityToBuy(refVal_setNotMarginQuantityToBuy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("orderEvaluation"))))
    {
        double refVal_setOrderEvaluation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("orderEvaluation"))), refVal_setOrderEvaluation );
        setOrderEvaluation(refVal_setOrderEvaluation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("commission"))))
    {
        double refVal_setCommission;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("commission"))), refVal_setCommission );
        setCommission(refVal_setCommission);
    }
    return ok;
}

utility::string_t EstimateOrderModel::getPortfolio() const
{
    return m_Portfolio;
}

void EstimateOrderModel::setPortfolio(const utility::string_t& value)
{
    m_Portfolio = value;
    m_PortfolioIsSet = true;
}

bool EstimateOrderModel::portfolioIsSet() const
{
    return m_PortfolioIsSet;
}

void EstimateOrderModel::unsetPortfolio()
{
    m_PortfolioIsSet = false;
}
utility::string_t EstimateOrderModel::getTicker() const
{
    return m_Ticker;
}

void EstimateOrderModel::setTicker(const utility::string_t& value)
{
    m_Ticker = value;
    m_TickerIsSet = true;
}

bool EstimateOrderModel::tickerIsSet() const
{
    return m_TickerIsSet;
}

void EstimateOrderModel::unsetTicker()
{
    m_TickerIsSet = false;
}
std::shared_ptr<Exchange> EstimateOrderModel::getExchange() const
{
    return m_Exchange;
}

void EstimateOrderModel::setExchange(const std::shared_ptr<Exchange>& value)
{
    m_Exchange = value;
    m_ExchangeIsSet = true;
}

bool EstimateOrderModel::exchangeIsSet() const
{
    return m_ExchangeIsSet;
}

void EstimateOrderModel::unsetExchange()
{
    m_ExchangeIsSet = false;
}
double EstimateOrderModel::getQuantityToSell() const
{
    return m_QuantityToSell;
}

void EstimateOrderModel::setQuantityToSell(double value)
{
    m_QuantityToSell = value;
    m_QuantityToSellIsSet = true;
}

bool EstimateOrderModel::quantityToSellIsSet() const
{
    return m_QuantityToSellIsSet;
}

void EstimateOrderModel::unsetQuantityToSell()
{
    m_QuantityToSellIsSet = false;
}
double EstimateOrderModel::getQuantityToBuy() const
{
    return m_QuantityToBuy;
}

void EstimateOrderModel::setQuantityToBuy(double value)
{
    m_QuantityToBuy = value;
    m_QuantityToBuyIsSet = true;
}

bool EstimateOrderModel::quantityToBuyIsSet() const
{
    return m_QuantityToBuyIsSet;
}

void EstimateOrderModel::unsetQuantityToBuy()
{
    m_QuantityToBuyIsSet = false;
}
double EstimateOrderModel::getNotMarginQuantityToSell() const
{
    return m_NotMarginQuantityToSell;
}

void EstimateOrderModel::setNotMarginQuantityToSell(double value)
{
    m_NotMarginQuantityToSell = value;
    m_NotMarginQuantityToSellIsSet = true;
}

bool EstimateOrderModel::notMarginQuantityToSellIsSet() const
{
    return m_NotMarginQuantityToSellIsSet;
}

void EstimateOrderModel::unsetNotMarginQuantityToSell()
{
    m_NotMarginQuantityToSellIsSet = false;
}
double EstimateOrderModel::getNotMarginQuantityToBuy() const
{
    return m_NotMarginQuantityToBuy;
}

void EstimateOrderModel::setNotMarginQuantityToBuy(double value)
{
    m_NotMarginQuantityToBuy = value;
    m_NotMarginQuantityToBuyIsSet = true;
}

bool EstimateOrderModel::notMarginQuantityToBuyIsSet() const
{
    return m_NotMarginQuantityToBuyIsSet;
}

void EstimateOrderModel::unsetNotMarginQuantityToBuy()
{
    m_NotMarginQuantityToBuyIsSet = false;
}
double EstimateOrderModel::getOrderEvaluation() const
{
    return m_OrderEvaluation;
}

void EstimateOrderModel::setOrderEvaluation(double value)
{
    m_OrderEvaluation = value;
    m_OrderEvaluationIsSet = true;
}

bool EstimateOrderModel::orderEvaluationIsSet() const
{
    return m_OrderEvaluationIsSet;
}

void EstimateOrderModel::unsetOrderEvaluation()
{
    m_OrderEvaluationIsSet = false;
}
double EstimateOrderModel::getCommission() const
{
    return m_Commission;
}

void EstimateOrderModel::setCommission(double value)
{
    m_Commission = value;
    m_CommissionIsSet = true;
}

bool EstimateOrderModel::commissionIsSet() const
{
    return m_CommissionIsSet;
}

void EstimateOrderModel::unsetCommission()
{
    m_CommissionIsSet = false;
}
}



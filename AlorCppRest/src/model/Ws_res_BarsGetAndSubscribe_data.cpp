/**
 * Alor OpenAPI V2
 * API для работы с торговой системой АЛОР Брокер. Предоставляет интерфейсы для выставления заявок и получения биржевой информации.  Данные для неавторизованных запросов предоставляются с задержкой от 15 минут, для авторизованных - без задержек.   Публичная биржевая информация может быть получена через HTTP(S) API, а также доступна через однократно установленное WebSocket соединение. <br> **Внимание!** WebSocket соединения могут и будут разрываться *(например, если клиент не успевает обрабатывать сообщения и на стороне API в буфере накопится более 5000 событий)*. <br> Во внешнем ПО необходимо предусмотреть механизмы переподключения и переподписки (при необходимости)! <br> <br>  В OpenAPI V2 доступны \"Московская Биржа\" (MOEX) и \"Биржа СПБ\" (SPBX).   <h4> Доступные типы данных </h4>  * Все сделки  * Все заявки  * Информация по инструментам  * Котировки  * Биржевые стаканы  * Исторические данные  * Позиции  * Информация о клиенте  <h4>Поддерживаемые виды заявок</h4>  * рыночные  * лимитные  * стоп-лосс  * тейк-профит  * стоп-лосс лимит  * тейк-профит лимит  <h4>    Ограничения по частоте запросов     </h4> <p>На текущий момент ограничений по количеству запросов в минуту нет, однако есть ограничение на общее количество подписок (сотни тысяч). При достижении лимита подписок клиент будет заблокирован и в течение нескольких минут не сможет создавать новые подписки. Уже существующие подписки продолжат работать. <br/>  Сервер может обрабатывать \"тяжелые\" запросы (пример - история за все время) и запросы без авторизации с меньшим приоритетом.<br/> </p>  <h4>Получение списка портфелей</h4> <p>Получить список доступных портфелей можно из JWT токена</p> <p>Для получения списка доступных портфелей необходимо декодировать JWT токен. Портфели находятся в поле <b>portfolios</b>.</p> <br/>  <h2> Авторизация </h2>  <h4>OAuth</h4>  <b>Внимание!</b>   JWT и refresh token — равносильны логину и паролю. Их нужно скрывать от публичного доступа.  <h4>Для разработчиков сторонних приложений, в которых торговлю будут вести их пользователи.</h4>  Мы предоставляем сервис для авторизации сторониих приложений по стандарту OAuth 2.0. С примером приложения, использующего OAuth сервис для авторизации пользователей можно ознакомиться в разделе  <a href=\"/examples\">Примеры</a>.  Список разрешений (scopes), которые могут быть выданы приложению: <table>   <tr>     <td><b>OrdersRead</b></td>     <td>Чтение выставленных заявок</td>   </tr>   <tr>     <td><b>OrdersCreate</b></td>     <td>Выставление заявок</td>   </tr>   <tr>     <td><b>Trades</b></td>     <td>Чтение совершенных сделок</td>   </tr>   <tr>     <td><b>Personal</b></td>     <td>Персональная информация: ФИО, почта и т.п.</td>   </tr>   <tr>     <td><b>Stats</b></td>     <td>Статистика: прибыль, средние цены и т.п.</td>   </tr> </table>  <h4>Для ведения операций от своего имени</h4>  Выписать себе <b>refresh token</b> для ведения операций от своего имени [можно здесь](https://alor.dev/open-api-tokens).  <h2>Краткое описание работы с авторизацией</h2>  Чтобы выполнить авторизованный запрос, добавьте в запрос заголовок с именем \"Authorization\" и значением, состоящим из префикса `\"Bearer \"` и валидного JWT токена.  Срок жизни JWT короткий: это сделано для безопасности.  Для большинства вариантов использования API мы рекоммендуем использовать механизм  <b>refresh token</b> .  Механизм  <b>refresh token</b>  позволяет получать JWT с новым сроком жизни. Для этого отправьте POST запрос на адрес `https://oauthdev.alor.ru/refresh?token={refreshToken}` *(тестовый контур)* или `https://oauth.alor.ru/refresh?token={refreshToken}` *(боевой контур)*. Если у  <b>refresh token</b>  не истек срок жизни и не он не был отозван, то в теле ответа в поле AccessToken вернётся свежий JWT токен.   Срок жизни  <b>refresh token</b>, получаемого обычным способом — 1 месяц.   Срок жизни  <b>refresh token</b>, получаемого самостоятельным выписыванием — год.  | |-  > Если мы для вас не завели портфели для ведения торговли в игровом контуре, оставьте заявку на <a href=\"mailto:openapi@alor.ru\">openapi@alor.ru</a> или свяжитесь с нами в [телеграме](https://t.me/AlorOpenAPI).  </br></br> Тестовый контур: `https://apidev.alor.ru`  Боевой контур: `https://api.alor.ru` 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: openapi@alor.ru
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "AlorCppRest/model/Ws_res_BarsGetAndSubscribe_data.h"

namespace alormodel {



Ws_res_BarsGetAndSubscribe_data::Ws_res_BarsGetAndSubscribe_data()
{
    m_Time = 0L;
    m_TimeIsSet = false;
    m_Close = 0.0;
    m_CloseIsSet = false;
    m_Open = 0.0;
    m_OpenIsSet = false;
    m_High = 0.0;
    m_HighIsSet = false;
    m_Low = 0.0;
    m_LowIsSet = false;
    m_Volume = 0;
    m_VolumeIsSet = false;
}

Ws_res_BarsGetAndSubscribe_data::~Ws_res_BarsGetAndSubscribe_data()
{
}

void Ws_res_BarsGetAndSubscribe_data::validate()
{
    // TODO: implement validation
}

web::json::value Ws_res_BarsGetAndSubscribe_data::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_TimeIsSet)
    {
        val[utility::conversions::to_string_t(U("time"))] = ModelBase::toJson(m_Time);
    }
    if(m_CloseIsSet)
    {
        val[utility::conversions::to_string_t(U("close"))] = ModelBase::toJson(m_Close);
    }
    if(m_OpenIsSet)
    {
        val[utility::conversions::to_string_t(U("open"))] = ModelBase::toJson(m_Open);
    }
    if(m_HighIsSet)
    {
        val[utility::conversions::to_string_t(U("high"))] = ModelBase::toJson(m_High);
    }
    if(m_LowIsSet)
    {
        val[utility::conversions::to_string_t(U("low"))] = ModelBase::toJson(m_Low);
    }
    if(m_VolumeIsSet)
    {
        val[utility::conversions::to_string_t(U("volume"))] = ModelBase::toJson(m_Volume);
    }

    return val;
}

bool Ws_res_BarsGetAndSubscribe_data::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("time")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTime);
            setTime(refVal_setTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("close"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("close")));
        if(!fieldValue.is_null())
        {
            double refVal_setClose;
            ok &= ModelBase::fromJson(fieldValue, refVal_setClose);
            setClose(refVal_setClose);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("open"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("open")));
        if(!fieldValue.is_null())
        {
            double refVal_setOpen;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOpen);
            setOpen(refVal_setOpen);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("high"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("high")));
        if(!fieldValue.is_null())
        {
            double refVal_setHigh;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHigh);
            setHigh(refVal_setHigh);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("low"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("low")));
        if(!fieldValue.is_null())
        {
            double refVal_setLow;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLow);
            setLow(refVal_setLow);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("volume"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("volume")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setVolume;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVolume);
            setVolume(refVal_setVolume);
        }
    }
    return ok;
}

void Ws_res_BarsGetAndSubscribe_data::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_TimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("time")), m_Time));
    }
    if(m_CloseIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("close")), m_Close));
    }
    if(m_OpenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("open")), m_Open));
    }
    if(m_HighIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("high")), m_High));
    }
    if(m_LowIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("low")), m_Low));
    }
    if(m_VolumeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("volume")), m_Volume));
    }
}

bool Ws_res_BarsGetAndSubscribe_data::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("time"))))
    {
        int64_t refVal_setTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("time"))), refVal_setTime );
        setTime(refVal_setTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("close"))))
    {
        double refVal_setClose;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("close"))), refVal_setClose );
        setClose(refVal_setClose);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("open"))))
    {
        double refVal_setOpen;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("open"))), refVal_setOpen );
        setOpen(refVal_setOpen);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("high"))))
    {
        double refVal_setHigh;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("high"))), refVal_setHigh );
        setHigh(refVal_setHigh);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("low"))))
    {
        double refVal_setLow;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("low"))), refVal_setLow );
        setLow(refVal_setLow);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("volume"))))
    {
        int32_t refVal_setVolume;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("volume"))), refVal_setVolume );
        setVolume(refVal_setVolume);
    }
    return ok;
}

int64_t Ws_res_BarsGetAndSubscribe_data::getTime() const
{
    return m_Time;
}

void Ws_res_BarsGetAndSubscribe_data::setTime(int64_t value)
{
    m_Time = value;
    m_TimeIsSet = true;
}

bool Ws_res_BarsGetAndSubscribe_data::timeIsSet() const
{
    return m_TimeIsSet;
}

void Ws_res_BarsGetAndSubscribe_data::unsetTime()
{
    m_TimeIsSet = false;
}
double Ws_res_BarsGetAndSubscribe_data::getClose() const
{
    return m_Close;
}

void Ws_res_BarsGetAndSubscribe_data::setClose(double value)
{
    m_Close = value;
    m_CloseIsSet = true;
}

bool Ws_res_BarsGetAndSubscribe_data::closeIsSet() const
{
    return m_CloseIsSet;
}

void Ws_res_BarsGetAndSubscribe_data::unsetClose()
{
    m_CloseIsSet = false;
}
double Ws_res_BarsGetAndSubscribe_data::getOpen() const
{
    return m_Open;
}

void Ws_res_BarsGetAndSubscribe_data::setOpen(double value)
{
    m_Open = value;
    m_OpenIsSet = true;
}

bool Ws_res_BarsGetAndSubscribe_data::openIsSet() const
{
    return m_OpenIsSet;
}

void Ws_res_BarsGetAndSubscribe_data::unsetOpen()
{
    m_OpenIsSet = false;
}
double Ws_res_BarsGetAndSubscribe_data::getHigh() const
{
    return m_High;
}

void Ws_res_BarsGetAndSubscribe_data::setHigh(double value)
{
    m_High = value;
    m_HighIsSet = true;
}

bool Ws_res_BarsGetAndSubscribe_data::highIsSet() const
{
    return m_HighIsSet;
}

void Ws_res_BarsGetAndSubscribe_data::unsetHigh()
{
    m_HighIsSet = false;
}
double Ws_res_BarsGetAndSubscribe_data::getLow() const
{
    return m_Low;
}

void Ws_res_BarsGetAndSubscribe_data::setLow(double value)
{
    m_Low = value;
    m_LowIsSet = true;
}

bool Ws_res_BarsGetAndSubscribe_data::lowIsSet() const
{
    return m_LowIsSet;
}

void Ws_res_BarsGetAndSubscribe_data::unsetLow()
{
    m_LowIsSet = false;
}
int32_t Ws_res_BarsGetAndSubscribe_data::getVolume() const
{
    return m_Volume;
}

void Ws_res_BarsGetAndSubscribe_data::setVolume(int32_t value)
{
    m_Volume = value;
    m_VolumeIsSet = true;
}

bool Ws_res_BarsGetAndSubscribe_data::volumeIsSet() const
{
    return m_VolumeIsSet;
}

void Ws_res_BarsGetAndSubscribe_data::unsetVolume()
{
    m_VolumeIsSet = false;
}
}



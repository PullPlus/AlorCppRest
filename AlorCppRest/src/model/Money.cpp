/**
 * Alor OpenAPI V2
 * API для работы с торговой системой АЛОР Брокер. Предоставляет интерфейсы для выставления заявок и получения биржевой информации.  Данные для неавторизованных запросов предоставляются с задержкой от 15 минут, для авторизованных - без задержек.   Публичная биржевая информация может быть получена через HTTP(S) API, а также доступна через однократно установленное WebSocket соединение. <br> **Внимание!** WebSocket соединения могут и будут разрываться *(например, если клиент не успевает обрабатывать сообщения и на стороне API в буфере накопится более 5000 событий)*. <br> Во внешнем ПО необходимо предусмотреть механизмы переподключения и переподписки (при необходимости)! <br> <br>  В OpenAPI V2 доступны \"Московская Биржа\" (MOEX) и \"Биржа СПБ\" (SPBX).   <h4> Доступные типы данных </h4>  * Все сделки  * Все заявки  * Информация по инструментам  * Котировки  * Биржевые стаканы  * Исторические данные  * Позиции  * Информация о клиенте  <h4>Поддерживаемые виды заявок</h4>  * рыночные  * лимитные  * стоп-лосс  * тейк-профит  * стоп-лосс лимит  * тейк-профит лимит  <h4>    Ограничения по частоте запросов     </h4> <p>На текущий момент ограничений по количеству запросов в минуту нет, однако есть ограничение на общее количество подписок (сотни тысяч). При достижении лимита подписок клиент будет заблокирован и в течение нескольких минут не сможет создавать новые подписки. Уже существующие подписки продолжат работать. <br/>  Сервер может обрабатывать \"тяжелые\" запросы (пример - история за все время) и запросы без авторизации с меньшим приоритетом.<br/> </p>  <h4>Получение списка портфелей</h4> <p>Получить список доступных портфелей можно из JWT токена</p> <p>Для получения списка доступных портфелей необходимо декодировать JWT токен. Портфели находятся в поле <b>portfolios</b>.</p> <br/>  <h2> Авторизация </h2>  <h4>OAuth</h4>  <b>Внимание!</b>   JWT и refresh token — равносильны логину и паролю. Их нужно скрывать от публичного доступа.  <h4>Для разработчиков сторонних приложений, в которых торговлю будут вести их пользователи.</h4>  Мы предоставляем сервис для авторизации сторониих приложений по стандарту OAuth 2.0. С примером приложения, использующего OAuth сервис для авторизации пользователей можно ознакомиться в разделе  <a href=\"/examples\">Примеры</a>.  Список разрешений (scopes), которые могут быть выданы приложению: <table>   <tr>     <td><b>OrdersRead</b></td>     <td>Чтение выставленных заявок</td>   </tr>   <tr>     <td><b>OrdersCreate</b></td>     <td>Выставление заявок</td>   </tr>   <tr>     <td><b>Trades</b></td>     <td>Чтение совершенных сделок</td>   </tr>   <tr>     <td><b>Personal</b></td>     <td>Персональная информация: ФИО, почта и т.п.</td>   </tr>   <tr>     <td><b>Stats</b></td>     <td>Статистика: прибыль, средние цены и т.п.</td>   </tr> </table>  <h4>Для ведения операций от своего имени</h4>  Выписать себе <b>refresh token</b> для ведения операций от своего имени [можно здесь](https://alor.dev/open-api-tokens).  <h2>Краткое описание работы с авторизацией</h2>  Чтобы выполнить авторизованный запрос, добавьте в запрос заголовок с именем \"Authorization\" и значением, состоящим из префикса `\"Bearer \"` и валидного JWT токена.  Срок жизни JWT короткий: это сделано для безопасности.  Для большинства вариантов использования API мы рекоммендуем использовать механизм  <b>refresh token</b> .  Механизм  <b>refresh token</b>  позволяет получать JWT с новым сроком жизни. Для этого отправьте POST запрос на адрес `https://oauthdev.alor.ru/refresh?token={refreshToken}` *(тестовый контур)* или `https://oauth.alor.ru/refresh?token={refreshToken}` *(боевой контур)*. Если у  <b>refresh token</b>  не истек срок жизни и не он не был отозван, то в теле ответа в поле AccessToken вернётся свежий JWT токен.   Срок жизни  <b>refresh token</b>, получаемого обычным способом — 1 месяц.   Срок жизни  <b>refresh token</b>, получаемого самостоятельным выписыванием — год.  | |-  > Если мы для вас не завели портфели для ведения торговли в игровом контуре, оставьте заявку на <a href=\"mailto:openapi@alor.ru\">openapi@alor.ru</a> или свяжитесь с нами в [телеграме](https://t.me/AlorOpenAPI).  </br></br> Тестовый контур: `https://apidev.alor.ru`  Боевой контур: `https://api.alor.ru` 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: openapi@alor.ru
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "AlorCppRest/model/Money.h"

namespace alormodel {



Money::Money()
{
    m_Cash = 0.0;
    m_CashIsSet = false;
    m_Used = 0.0;
    m_UsedIsSet = false;
    m_Open = 0.0;
    m_OpenIsSet = false;
    m_Profit = 0.0;
    m_ProfitIsSet = false;
    m_ProfitRate = 0.0;
    m_ProfitRateIsSet = false;
    m_Comission = 0.0;
    m_ComissionIsSet = false;
    m_Changes = 0.0;
    m_ChangesIsSet = false;
    m_Portfolio = 0.0;
    m_PortfolioIsSet = false;
    m_Free = 0.0;
    m_FreeIsSet = false;
}

Money::~Money()
{
}

void Money::validate()
{
    // TODO: implement validation
}

web::json::value Money::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CashIsSet)
    {
        val[utility::conversions::to_string_t(U("cash"))] = ModelBase::toJson(m_Cash);
    }
    if(m_UsedIsSet)
    {
        val[utility::conversions::to_string_t(U("used"))] = ModelBase::toJson(m_Used);
    }
    if(m_OpenIsSet)
    {
        val[utility::conversions::to_string_t(U("open"))] = ModelBase::toJson(m_Open);
    }
    if(m_ProfitIsSet)
    {
        val[utility::conversions::to_string_t(U("profit"))] = ModelBase::toJson(m_Profit);
    }
    if(m_ProfitRateIsSet)
    {
        val[utility::conversions::to_string_t(U("profitRate"))] = ModelBase::toJson(m_ProfitRate);
    }
    if(m_ComissionIsSet)
    {
        val[utility::conversions::to_string_t(U("comission"))] = ModelBase::toJson(m_Comission);
    }
    if(m_ChangesIsSet)
    {
        val[utility::conversions::to_string_t(U("changes"))] = ModelBase::toJson(m_Changes);
    }
    if(m_PortfolioIsSet)
    {
        val[utility::conversions::to_string_t(U("portfolio"))] = ModelBase::toJson(m_Portfolio);
    }
    if(m_FreeIsSet)
    {
        val[utility::conversions::to_string_t(U("free"))] = ModelBase::toJson(m_Free);
    }

    return val;
}

bool Money::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("cash"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cash")));
        if(!fieldValue.is_null())
        {
            double refVal_setCash;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCash);
            setCash(refVal_setCash);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("used"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("used")));
        if(!fieldValue.is_null())
        {
            double refVal_setUsed;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUsed);
            setUsed(refVal_setUsed);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("open"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("open")));
        if(!fieldValue.is_null())
        {
            double refVal_setOpen;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOpen);
            setOpen(refVal_setOpen);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("profit"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("profit")));
        if(!fieldValue.is_null())
        {
            double refVal_setProfit;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProfit);
            setProfit(refVal_setProfit);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("profitRate"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("profitRate")));
        if(!fieldValue.is_null())
        {
            double refVal_setProfitRate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProfitRate);
            setProfitRate(refVal_setProfitRate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("comission"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("comission")));
        if(!fieldValue.is_null())
        {
            double refVal_setComission;
            ok &= ModelBase::fromJson(fieldValue, refVal_setComission);
            setComission(refVal_setComission);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("changes"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("changes")));
        if(!fieldValue.is_null())
        {
            double refVal_setChanges;
            ok &= ModelBase::fromJson(fieldValue, refVal_setChanges);
            setChanges(refVal_setChanges);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("portfolio"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("portfolio")));
        if(!fieldValue.is_null())
        {
            double refVal_setPortfolio;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPortfolio);
            setPortfolio(refVal_setPortfolio);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("free"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("free")));
        if(!fieldValue.is_null())
        {
            double refVal_setFree;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFree);
            setFree(refVal_setFree);
        }
    }
    return ok;
}

void Money::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_CashIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cash")), m_Cash));
    }
    if(m_UsedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("used")), m_Used));
    }
    if(m_OpenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("open")), m_Open));
    }
    if(m_ProfitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("profit")), m_Profit));
    }
    if(m_ProfitRateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("profitRate")), m_ProfitRate));
    }
    if(m_ComissionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("comission")), m_Comission));
    }
    if(m_ChangesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("changes")), m_Changes));
    }
    if(m_PortfolioIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("portfolio")), m_Portfolio));
    }
    if(m_FreeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("free")), m_Free));
    }
}

bool Money::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("cash"))))
    {
        double refVal_setCash;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cash"))), refVal_setCash );
        setCash(refVal_setCash);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("used"))))
    {
        double refVal_setUsed;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("used"))), refVal_setUsed );
        setUsed(refVal_setUsed);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("open"))))
    {
        double refVal_setOpen;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("open"))), refVal_setOpen );
        setOpen(refVal_setOpen);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("profit"))))
    {
        double refVal_setProfit;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("profit"))), refVal_setProfit );
        setProfit(refVal_setProfit);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("profitRate"))))
    {
        double refVal_setProfitRate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("profitRate"))), refVal_setProfitRate );
        setProfitRate(refVal_setProfitRate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("comission"))))
    {
        double refVal_setComission;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("comission"))), refVal_setComission );
        setComission(refVal_setComission);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("changes"))))
    {
        double refVal_setChanges;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("changes"))), refVal_setChanges );
        setChanges(refVal_setChanges);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("portfolio"))))
    {
        double refVal_setPortfolio;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("portfolio"))), refVal_setPortfolio );
        setPortfolio(refVal_setPortfolio);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("free"))))
    {
        double refVal_setFree;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("free"))), refVal_setFree );
        setFree(refVal_setFree);
    }
    return ok;
}

double Money::getCash() const
{
    return m_Cash;
}

void Money::setCash(double value)
{
    m_Cash = value;
    m_CashIsSet = true;
}

bool Money::cashIsSet() const
{
    return m_CashIsSet;
}

void Money::unsetCash()
{
    m_CashIsSet = false;
}
double Money::getUsed() const
{
    return m_Used;
}

void Money::setUsed(double value)
{
    m_Used = value;
    m_UsedIsSet = true;
}

bool Money::usedIsSet() const
{
    return m_UsedIsSet;
}

void Money::unsetUsed()
{
    m_UsedIsSet = false;
}
double Money::getOpen() const
{
    return m_Open;
}

void Money::setOpen(double value)
{
    m_Open = value;
    m_OpenIsSet = true;
}

bool Money::openIsSet() const
{
    return m_OpenIsSet;
}

void Money::unsetOpen()
{
    m_OpenIsSet = false;
}
double Money::getProfit() const
{
    return m_Profit;
}

void Money::setProfit(double value)
{
    m_Profit = value;
    m_ProfitIsSet = true;
}

bool Money::profitIsSet() const
{
    return m_ProfitIsSet;
}

void Money::unsetProfit()
{
    m_ProfitIsSet = false;
}
double Money::getProfitRate() const
{
    return m_ProfitRate;
}

void Money::setProfitRate(double value)
{
    m_ProfitRate = value;
    m_ProfitRateIsSet = true;
}

bool Money::profitRateIsSet() const
{
    return m_ProfitRateIsSet;
}

void Money::unsetProfitRate()
{
    m_ProfitRateIsSet = false;
}
double Money::getComission() const
{
    return m_Comission;
}

void Money::setComission(double value)
{
    m_Comission = value;
    m_ComissionIsSet = true;
}

bool Money::comissionIsSet() const
{
    return m_ComissionIsSet;
}

void Money::unsetComission()
{
    m_ComissionIsSet = false;
}
double Money::getChanges() const
{
    return m_Changes;
}

void Money::setChanges(double value)
{
    m_Changes = value;
    m_ChangesIsSet = true;
}

bool Money::changesIsSet() const
{
    return m_ChangesIsSet;
}

void Money::unsetChanges()
{
    m_ChangesIsSet = false;
}
double Money::getPortfolio() const
{
    return m_Portfolio;
}

void Money::setPortfolio(double value)
{
    m_Portfolio = value;
    m_PortfolioIsSet = true;
}

bool Money::portfolioIsSet() const
{
    return m_PortfolioIsSet;
}

void Money::unsetPortfolio()
{
    m_PortfolioIsSet = false;
}
double Money::getFree() const
{
    return m_Free;
}

void Money::setFree(double value)
{
    m_Free = value;
    m_FreeIsSet = true;
}

bool Money::freeIsSet() const
{
    return m_FreeIsSet;
}

void Money::unsetFree()
{
    m_FreeIsSet = false;
}
}



/**
 * Alor OpenAPI V2
 * API для работы с торговой системой АЛОР Брокер. Предоставляет интерфейсы для выставления заявок и получения биржевой информации.  Данные для неавторизованных запросов предоставляются с задержкой от 15 минут, для авторизованных - без задержек.   Публичная биржевая информация может быть получена через HTTP(S) API, а также доступна через однократно установленное WebSocket соединение. <br> **Внимание!** WebSocket соединения могут и будут разрываться *(например, если клиент не успевает обрабатывать сообщения и на стороне API в буфере накопится более 5000 событий)*. <br> Во внешнем ПО необходимо предусмотреть механизмы переподключения и переподписки (при необходимости)! <br> <br>  В OpenAPI V2 доступны \"Московская Биржа\" (MOEX) и \"Биржа СПБ\" (SPBX).   <h4> Доступные типы данных </h4>  * Все сделки  * Все заявки  * Информация по инструментам  * Котировки  * Биржевые стаканы  * Исторические данные  * Позиции  * Информация о клиенте  <h4>Поддерживаемые виды заявок</h4>  * рыночные  * лимитные  * стоп-лосс  * тейк-профит  * стоп-лосс лимит  * тейк-профит лимит  <h4>    Ограничения по частоте запросов     </h4> <p>На текущий момент ограничений по количеству запросов в минуту нет, однако есть ограничение на общее количество подписок (сотни тысяч). При достижении лимита подписок клиент будет заблокирован и в течение нескольких минут не сможет создавать новые подписки. Уже существующие подписки продолжат работать. <br/>  Сервер может обрабатывать \"тяжелые\" запросы (пример - история за все время) и запросы без авторизации с меньшим приоритетом.<br/> </p>  <h4>Получение списка портфелей</h4> <p>Получить список доступных портфелей можно из JWT токена</p> <p>Для получения списка доступных портфелей необходимо декодировать JWT токен. Портфели находятся в поле <b>portfolios</b>.</p> <br/>  <h2> Авторизация </h2>  <h4>OAuth</h4>  <b>Внимание!</b>   JWT и refresh token — равносильны логину и паролю. Их нужно скрывать от публичного доступа.  <h4>Для разработчиков сторонних приложений, в которых торговлю будут вести их пользователи.</h4>  Мы предоставляем сервис для авторизации сторониих приложений по стандарту OAuth 2.0. С примером приложения, использующего OAuth сервис для авторизации пользователей можно ознакомиться в разделе  <a href=\"/examples\">Примеры</a>.  Список разрешений (scopes), которые могут быть выданы приложению: <table>   <tr>     <td><b>OrdersRead</b></td>     <td>Чтение выставленных заявок</td>   </tr>   <tr>     <td><b>OrdersCreate</b></td>     <td>Выставление заявок</td>   </tr>   <tr>     <td><b>Trades</b></td>     <td>Чтение совершенных сделок</td>   </tr>   <tr>     <td><b>Personal</b></td>     <td>Персональная информация: ФИО, почта и т.п.</td>   </tr>   <tr>     <td><b>Stats</b></td>     <td>Статистика: прибыль, средние цены и т.п.</td>   </tr> </table>  <h4>Для ведения операций от своего имени</h4>  Выписать себе <b>refresh token</b> для ведения операций от своего имени [можно здесь](https://alor.dev/open-api-tokens).  <h2>Краткое описание работы с авторизацией</h2>  Чтобы выполнить авторизованный запрос, добавьте в запрос заголовок с именем \"Authorization\" и значением, состоящим из префикса `\"Bearer \"` и валидного JWT токена.  Срок жизни JWT короткий: это сделано для безопасности.  Для большинства вариантов использования API мы рекоммендуем использовать механизм  <b>refresh token</b> .  Механизм  <b>refresh token</b>  позволяет получать JWT с новым сроком жизни. Для этого отправьте POST запрос на адрес `https://oauthdev.alor.ru/refresh?token={refreshToken}` *(тестовый контур)* или `https://oauth.alor.ru/refresh?token={refreshToken}` *(боевой контур)*. Если у  <b>refresh token</b>  не истек срок жизни и не он не был отозван, то в теле ответа в поле AccessToken вернётся свежий JWT токен.   Срок жизни  <b>refresh token</b>, получаемого обычным способом — 1 месяц.   Срок жизни  <b>refresh token</b>, получаемого самостоятельным выписыванием — год.  | |-  > Если мы для вас не завели портфели для ведения торговли в игровом контуре, оставьте заявку на <a href=\"mailto:openapi@alor.ru\">openapi@alor.ru</a> или свяжитесь с нами в [телеграме](https://t.me/AlorOpenAPI).  </br></br> Тестовый контур: `https://apidev.alor.ru`  Боевой контур: `https://api.alor.ru` 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: openapi@alor.ru
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "AlorCppRest/model/Security.h"

namespace alormodel {



Security::Security()
{
    m_Symbol = utility::conversions::to_string_t("");
    m_SymbolIsSet = false;
    m_Shortname = utility::conversions::to_string_t("");
    m_ShortnameIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_Exchange = utility::conversions::to_string_t("");
    m_ExchangeIsSet = false;
    m_Type = utility::conversions::to_string_t("");
    m_TypeIsSet = false;
    m_Lotsize = 0.0;
    m_LotsizeIsSet = false;
    m_Facevalue = 0.0;
    m_FacevalueIsSet = false;
    m_CfiCode = utility::conversions::to_string_t("");
    m_CfiCodeIsSet = false;
    m_Cancellation = utility::conversions::to_string_t("");
    m_CancellationIsSet = false;
    m_Minstep = 0.0;
    m_MinstepIsSet = false;
    m_Rating = 0.0;
    m_RatingIsSet = false;
    m_Marginbuy = 0.0;
    m_MarginbuyIsSet = false;
    m_Marginsell = 0.0;
    m_MarginsellIsSet = false;
    m_Marginrate = 0.0;
    m_MarginrateIsSet = false;
    m_Pricestep = 0.0;
    m_PricestepIsSet = false;
    m_PriceMax = 0.0;
    m_PriceMaxIsSet = false;
    m_PriceMin = 0.0;
    m_PriceMinIsSet = false;
    m_TheorPrice = 0.0;
    m_TheorPriceIsSet = false;
    m_TheorPriceLimit = 0.0;
    m_TheorPriceLimitIsSet = false;
    m_Volatility = 0.0;
    m_VolatilityIsSet = false;
    m_Currency = utility::conversions::to_string_t("");
    m_CurrencyIsSet = false;
    m_ISIN = utility::conversions::to_string_t("");
    m_ISINIsSet = false;
    m_Yield = 0;
    m_YieldIsSet = false;
    m_Primary_board = utility::conversions::to_string_t("");
    m_Primary_boardIsSet = false;
    m_TradingStatus = 0;
    m_TradingStatusIsSet = false;
    m_TradingStatusInfo = utility::conversions::to_string_t("");
    m_TradingStatusInfoIsSet = false;
    m_ComplexProductCategoryIsSet = false;
}

Security::~Security()
{
}

void Security::validate()
{
    // TODO: implement validation
}

web::json::value Security::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_SymbolIsSet)
    {
        val[utility::conversions::to_string_t(U("symbol"))] = ModelBase::toJson(m_Symbol);
    }
    if(m_ShortnameIsSet)
    {
        val[utility::conversions::to_string_t(U("shortname"))] = ModelBase::toJson(m_Shortname);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t(U("description"))] = ModelBase::toJson(m_Description);
    }
    if(m_ExchangeIsSet)
    {
        val[utility::conversions::to_string_t(U("exchange"))] = ModelBase::toJson(m_Exchange);
    }
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t(U("type"))] = ModelBase::toJson(m_Type);
    }
    if(m_LotsizeIsSet)
    {
        val[utility::conversions::to_string_t(U("lotsize"))] = ModelBase::toJson(m_Lotsize);
    }
    if(m_FacevalueIsSet)
    {
        val[utility::conversions::to_string_t(U("facevalue"))] = ModelBase::toJson(m_Facevalue);
    }
    if(m_CfiCodeIsSet)
    {
        val[utility::conversions::to_string_t(U("cfiCode"))] = ModelBase::toJson(m_CfiCode);
    }
    if(m_CancellationIsSet)
    {
        val[utility::conversions::to_string_t(U("cancellation"))] = ModelBase::toJson(m_Cancellation);
    }
    if(m_MinstepIsSet)
    {
        val[utility::conversions::to_string_t(U("minstep"))] = ModelBase::toJson(m_Minstep);
    }
    if(m_RatingIsSet)
    {
        val[utility::conversions::to_string_t(U("rating"))] = ModelBase::toJson(m_Rating);
    }
    if(m_MarginbuyIsSet)
    {
        val[utility::conversions::to_string_t(U("marginbuy"))] = ModelBase::toJson(m_Marginbuy);
    }
    if(m_MarginsellIsSet)
    {
        val[utility::conversions::to_string_t(U("marginsell"))] = ModelBase::toJson(m_Marginsell);
    }
    if(m_MarginrateIsSet)
    {
        val[utility::conversions::to_string_t(U("marginrate"))] = ModelBase::toJson(m_Marginrate);
    }
    if(m_PricestepIsSet)
    {
        val[utility::conversions::to_string_t(U("pricestep"))] = ModelBase::toJson(m_Pricestep);
    }
    if(m_PriceMaxIsSet)
    {
        val[utility::conversions::to_string_t(U("priceMax"))] = ModelBase::toJson(m_PriceMax);
    }
    if(m_PriceMinIsSet)
    {
        val[utility::conversions::to_string_t(U("priceMin"))] = ModelBase::toJson(m_PriceMin);
    }
    if(m_TheorPriceIsSet)
    {
        val[utility::conversions::to_string_t(U("theorPrice"))] = ModelBase::toJson(m_TheorPrice);
    }
    if(m_TheorPriceLimitIsSet)
    {
        val[utility::conversions::to_string_t(U("theorPriceLimit"))] = ModelBase::toJson(m_TheorPriceLimit);
    }
    if(m_VolatilityIsSet)
    {
        val[utility::conversions::to_string_t(U("volatility"))] = ModelBase::toJson(m_Volatility);
    }
    if(m_CurrencyIsSet)
    {
        val[utility::conversions::to_string_t(U("currency"))] = ModelBase::toJson(m_Currency);
    }
    if(m_ISINIsSet)
    {
        val[utility::conversions::to_string_t(U("ISIN"))] = ModelBase::toJson(m_ISIN);
    }
    if(m_YieldIsSet)
    {
        val[utility::conversions::to_string_t(U("yield"))] = ModelBase::toJson(m_Yield);
    }
    if(m_Primary_boardIsSet)
    {
        val[utility::conversions::to_string_t(U("primary_board"))] = ModelBase::toJson(m_Primary_board);
    }
    if(m_TradingStatusIsSet)
    {
        val[utility::conversions::to_string_t(U("tradingStatus"))] = ModelBase::toJson(m_TradingStatus);
    }
    if(m_TradingStatusInfoIsSet)
    {
        val[utility::conversions::to_string_t(U("tradingStatusInfo"))] = ModelBase::toJson(m_TradingStatusInfo);
    }
    if(m_ComplexProductCategoryIsSet)
    {
        val[utility::conversions::to_string_t(U("complexProductCategory"))] = ModelBase::toJson(m_ComplexProductCategory);
    }

    return val;
}

bool Security::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("symbol"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("symbol")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSymbol;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSymbol);
            setSymbol(refVal_setSymbol);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("shortname"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("shortname")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setShortname;
            ok &= ModelBase::fromJson(fieldValue, refVal_setShortname);
            setShortname(refVal_setShortname);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDescription);
            setDescription(refVal_setDescription);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("exchange"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("exchange")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setExchange;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExchange);
            setExchange(refVal_setExchange);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setType);
            setType(refVal_setType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("lotsize"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("lotsize")));
        if(!fieldValue.is_null())
        {
            double refVal_setLotsize;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLotsize);
            setLotsize(refVal_setLotsize);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("facevalue"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("facevalue")));
        if(!fieldValue.is_null())
        {
            double refVal_setFacevalue;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFacevalue);
            setFacevalue(refVal_setFacevalue);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cfiCode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cfiCode")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCfiCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCfiCode);
            setCfiCode(refVal_setCfiCode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cancellation"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cancellation")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCancellation;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCancellation);
            setCancellation(refVal_setCancellation);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("minstep"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("minstep")));
        if(!fieldValue.is_null())
        {
            double refVal_setMinstep;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMinstep);
            setMinstep(refVal_setMinstep);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("rating"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("rating")));
        if(!fieldValue.is_null())
        {
            double refVal_setRating;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRating);
            setRating(refVal_setRating);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("marginbuy"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("marginbuy")));
        if(!fieldValue.is_null())
        {
            double refVal_setMarginbuy;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMarginbuy);
            setMarginbuy(refVal_setMarginbuy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("marginsell"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("marginsell")));
        if(!fieldValue.is_null())
        {
            double refVal_setMarginsell;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMarginsell);
            setMarginsell(refVal_setMarginsell);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("marginrate"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("marginrate")));
        if(!fieldValue.is_null())
        {
            double refVal_setMarginrate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMarginrate);
            setMarginrate(refVal_setMarginrate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pricestep"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pricestep")));
        if(!fieldValue.is_null())
        {
            double refVal_setPricestep;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPricestep);
            setPricestep(refVal_setPricestep);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("priceMax"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("priceMax")));
        if(!fieldValue.is_null())
        {
            double refVal_setPriceMax;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPriceMax);
            setPriceMax(refVal_setPriceMax);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("priceMin"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("priceMin")));
        if(!fieldValue.is_null())
        {
            double refVal_setPriceMin;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPriceMin);
            setPriceMin(refVal_setPriceMin);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("theorPrice"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("theorPrice")));
        if(!fieldValue.is_null())
        {
            double refVal_setTheorPrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTheorPrice);
            setTheorPrice(refVal_setTheorPrice);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("theorPriceLimit"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("theorPriceLimit")));
        if(!fieldValue.is_null())
        {
            double refVal_setTheorPriceLimit;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTheorPriceLimit);
            setTheorPriceLimit(refVal_setTheorPriceLimit);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("volatility"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("volatility")));
        if(!fieldValue.is_null())
        {
            double refVal_setVolatility;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVolatility);
            setVolatility(refVal_setVolatility);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("currency"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("currency")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCurrency;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCurrency);
            setCurrency(refVal_setCurrency);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ISIN"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ISIN")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setISIN;
            ok &= ModelBase::fromJson(fieldValue, refVal_setISIN);
            setISIN(refVal_setISIN);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("yield"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("yield")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setYield;
            ok &= ModelBase::fromJson(fieldValue, refVal_setYield);
            setYield(refVal_setYield);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("primary_board"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("primary_board")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPrimaryBoard;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPrimaryBoard);
            setPrimaryBoard(refVal_setPrimaryBoard);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tradingStatus"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tradingStatus")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTradingStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTradingStatus);
            setTradingStatus(refVal_setTradingStatus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tradingStatusInfo"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tradingStatusInfo")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTradingStatusInfo;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTradingStatusInfo);
            setTradingStatusInfo(refVal_setTradingStatusInfo);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("complexProductCategory"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("complexProductCategory")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ComplexProductCategory> refVal_setComplexProductCategory;
            ok &= ModelBase::fromJson(fieldValue, refVal_setComplexProductCategory);
            setComplexProductCategory(refVal_setComplexProductCategory);
        }
    }
    return ok;
}

void Security::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_SymbolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("symbol")), m_Symbol));
    }
    if(m_ShortnameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("shortname")), m_Shortname));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("description")), m_Description));
    }
    if(m_ExchangeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("exchange")), m_Exchange));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("type")), m_Type));
    }
    if(m_LotsizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("lotsize")), m_Lotsize));
    }
    if(m_FacevalueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("facevalue")), m_Facevalue));
    }
    if(m_CfiCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cfiCode")), m_CfiCode));
    }
    if(m_CancellationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cancellation")), m_Cancellation));
    }
    if(m_MinstepIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("minstep")), m_Minstep));
    }
    if(m_RatingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("rating")), m_Rating));
    }
    if(m_MarginbuyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("marginbuy")), m_Marginbuy));
    }
    if(m_MarginsellIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("marginsell")), m_Marginsell));
    }
    if(m_MarginrateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("marginrate")), m_Marginrate));
    }
    if(m_PricestepIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pricestep")), m_Pricestep));
    }
    if(m_PriceMaxIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("priceMax")), m_PriceMax));
    }
    if(m_PriceMinIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("priceMin")), m_PriceMin));
    }
    if(m_TheorPriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("theorPrice")), m_TheorPrice));
    }
    if(m_TheorPriceLimitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("theorPriceLimit")), m_TheorPriceLimit));
    }
    if(m_VolatilityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("volatility")), m_Volatility));
    }
    if(m_CurrencyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("currency")), m_Currency));
    }
    if(m_ISINIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ISIN")), m_ISIN));
    }
    if(m_YieldIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("yield")), m_Yield));
    }
    if(m_Primary_boardIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("primary_board")), m_Primary_board));
    }
    if(m_TradingStatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tradingStatus")), m_TradingStatus));
    }
    if(m_TradingStatusInfoIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tradingStatusInfo")), m_TradingStatusInfo));
    }
    if(m_ComplexProductCategoryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("complexProductCategory")), m_ComplexProductCategory));
    }
}

bool Security::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("symbol"))))
    {
        utility::string_t refVal_setSymbol;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("symbol"))), refVal_setSymbol );
        setSymbol(refVal_setSymbol);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("shortname"))))
    {
        utility::string_t refVal_setShortname;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("shortname"))), refVal_setShortname );
        setShortname(refVal_setShortname);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("description"))))
    {
        utility::string_t refVal_setDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("description"))), refVal_setDescription );
        setDescription(refVal_setDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("exchange"))))
    {
        utility::string_t refVal_setExchange;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("exchange"))), refVal_setExchange );
        setExchange(refVal_setExchange);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("type"))))
    {
        utility::string_t refVal_setType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("type"))), refVal_setType );
        setType(refVal_setType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("lotsize"))))
    {
        double refVal_setLotsize;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("lotsize"))), refVal_setLotsize );
        setLotsize(refVal_setLotsize);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("facevalue"))))
    {
        double refVal_setFacevalue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("facevalue"))), refVal_setFacevalue );
        setFacevalue(refVal_setFacevalue);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cfiCode"))))
    {
        utility::string_t refVal_setCfiCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cfiCode"))), refVal_setCfiCode );
        setCfiCode(refVal_setCfiCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cancellation"))))
    {
        utility::string_t refVal_setCancellation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cancellation"))), refVal_setCancellation );
        setCancellation(refVal_setCancellation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("minstep"))))
    {
        double refVal_setMinstep;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("minstep"))), refVal_setMinstep );
        setMinstep(refVal_setMinstep);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("rating"))))
    {
        double refVal_setRating;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("rating"))), refVal_setRating );
        setRating(refVal_setRating);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("marginbuy"))))
    {
        double refVal_setMarginbuy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("marginbuy"))), refVal_setMarginbuy );
        setMarginbuy(refVal_setMarginbuy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("marginsell"))))
    {
        double refVal_setMarginsell;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("marginsell"))), refVal_setMarginsell );
        setMarginsell(refVal_setMarginsell);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("marginrate"))))
    {
        double refVal_setMarginrate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("marginrate"))), refVal_setMarginrate );
        setMarginrate(refVal_setMarginrate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pricestep"))))
    {
        double refVal_setPricestep;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pricestep"))), refVal_setPricestep );
        setPricestep(refVal_setPricestep);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("priceMax"))))
    {
        double refVal_setPriceMax;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("priceMax"))), refVal_setPriceMax );
        setPriceMax(refVal_setPriceMax);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("priceMin"))))
    {
        double refVal_setPriceMin;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("priceMin"))), refVal_setPriceMin );
        setPriceMin(refVal_setPriceMin);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("theorPrice"))))
    {
        double refVal_setTheorPrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("theorPrice"))), refVal_setTheorPrice );
        setTheorPrice(refVal_setTheorPrice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("theorPriceLimit"))))
    {
        double refVal_setTheorPriceLimit;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("theorPriceLimit"))), refVal_setTheorPriceLimit );
        setTheorPriceLimit(refVal_setTheorPriceLimit);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("volatility"))))
    {
        double refVal_setVolatility;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("volatility"))), refVal_setVolatility );
        setVolatility(refVal_setVolatility);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("currency"))))
    {
        utility::string_t refVal_setCurrency;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("currency"))), refVal_setCurrency );
        setCurrency(refVal_setCurrency);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ISIN"))))
    {
        utility::string_t refVal_setISIN;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ISIN"))), refVal_setISIN );
        setISIN(refVal_setISIN);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("yield"))))
    {
        int32_t refVal_setYield;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("yield"))), refVal_setYield );
        setYield(refVal_setYield);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("primary_board"))))
    {
        utility::string_t refVal_setPrimaryBoard;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("primary_board"))), refVal_setPrimaryBoard );
        setPrimaryBoard(refVal_setPrimaryBoard);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tradingStatus"))))
    {
        int32_t refVal_setTradingStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tradingStatus"))), refVal_setTradingStatus );
        setTradingStatus(refVal_setTradingStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tradingStatusInfo"))))
    {
        utility::string_t refVal_setTradingStatusInfo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tradingStatusInfo"))), refVal_setTradingStatusInfo );
        setTradingStatusInfo(refVal_setTradingStatusInfo);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("complexProductCategory"))))
    {
        std::shared_ptr<ComplexProductCategory> refVal_setComplexProductCategory;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("complexProductCategory"))), refVal_setComplexProductCategory );
        setComplexProductCategory(refVal_setComplexProductCategory);
    }
    return ok;
}

utility::string_t Security::getSymbol() const
{
    return m_Symbol;
}

void Security::setSymbol(const utility::string_t& value)
{
    m_Symbol = value;
    m_SymbolIsSet = true;
}

bool Security::symbolIsSet() const
{
    return m_SymbolIsSet;
}

void Security::unsetSymbol()
{
    m_SymbolIsSet = false;
}
utility::string_t Security::getShortname() const
{
    return m_Shortname;
}

void Security::setShortname(const utility::string_t& value)
{
    m_Shortname = value;
    m_ShortnameIsSet = true;
}

bool Security::shortnameIsSet() const
{
    return m_ShortnameIsSet;
}

void Security::unsetShortname()
{
    m_ShortnameIsSet = false;
}
utility::string_t Security::getDescription() const
{
    return m_Description;
}

void Security::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool Security::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void Security::unsetDescription()
{
    m_DescriptionIsSet = false;
}
utility::string_t Security::getExchange() const
{
    return m_Exchange;
}

void Security::setExchange(const utility::string_t& value)
{
    m_Exchange = value;
    m_ExchangeIsSet = true;
}

bool Security::exchangeIsSet() const
{
    return m_ExchangeIsSet;
}

void Security::unsetExchange()
{
    m_ExchangeIsSet = false;
}
utility::string_t Security::getType() const
{
    return m_Type;
}

void Security::setType(const utility::string_t& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool Security::typeIsSet() const
{
    return m_TypeIsSet;
}

void Security::unsetType()
{
    m_TypeIsSet = false;
}
double Security::getLotsize() const
{
    return m_Lotsize;
}

void Security::setLotsize(double value)
{
    m_Lotsize = value;
    m_LotsizeIsSet = true;
}

bool Security::lotsizeIsSet() const
{
    return m_LotsizeIsSet;
}

void Security::unsetLotsize()
{
    m_LotsizeIsSet = false;
}
double Security::getFacevalue() const
{
    return m_Facevalue;
}

void Security::setFacevalue(double value)
{
    m_Facevalue = value;
    m_FacevalueIsSet = true;
}

bool Security::facevalueIsSet() const
{
    return m_FacevalueIsSet;
}

void Security::unsetFacevalue()
{
    m_FacevalueIsSet = false;
}
utility::string_t Security::getCfiCode() const
{
    return m_CfiCode;
}

void Security::setCfiCode(const utility::string_t& value)
{
    m_CfiCode = value;
    m_CfiCodeIsSet = true;
}

bool Security::cfiCodeIsSet() const
{
    return m_CfiCodeIsSet;
}

void Security::unsetCfiCode()
{
    m_CfiCodeIsSet = false;
}
utility::string_t Security::getCancellation() const
{
    return m_Cancellation;
}

void Security::setCancellation(const utility::string_t& value)
{
    m_Cancellation = value;
    m_CancellationIsSet = true;
}

bool Security::cancellationIsSet() const
{
    return m_CancellationIsSet;
}

void Security::unsetCancellation()
{
    m_CancellationIsSet = false;
}
double Security::getMinstep() const
{
    return m_Minstep;
}

void Security::setMinstep(double value)
{
    m_Minstep = value;
    m_MinstepIsSet = true;
}

bool Security::minstepIsSet() const
{
    return m_MinstepIsSet;
}

void Security::unsetMinstep()
{
    m_MinstepIsSet = false;
}
double Security::getRating() const
{
    return m_Rating;
}

void Security::setRating(double value)
{
    m_Rating = value;
    m_RatingIsSet = true;
}

bool Security::ratingIsSet() const
{
    return m_RatingIsSet;
}

void Security::unsetRating()
{
    m_RatingIsSet = false;
}
double Security::getMarginbuy() const
{
    return m_Marginbuy;
}

void Security::setMarginbuy(double value)
{
    m_Marginbuy = value;
    m_MarginbuyIsSet = true;
}

bool Security::marginbuyIsSet() const
{
    return m_MarginbuyIsSet;
}

void Security::unsetMarginbuy()
{
    m_MarginbuyIsSet = false;
}
double Security::getMarginsell() const
{
    return m_Marginsell;
}

void Security::setMarginsell(double value)
{
    m_Marginsell = value;
    m_MarginsellIsSet = true;
}

bool Security::marginsellIsSet() const
{
    return m_MarginsellIsSet;
}

void Security::unsetMarginsell()
{
    m_MarginsellIsSet = false;
}
double Security::getMarginrate() const
{
    return m_Marginrate;
}

void Security::setMarginrate(double value)
{
    m_Marginrate = value;
    m_MarginrateIsSet = true;
}

bool Security::marginrateIsSet() const
{
    return m_MarginrateIsSet;
}

void Security::unsetMarginrate()
{
    m_MarginrateIsSet = false;
}
double Security::getPricestep() const
{
    return m_Pricestep;
}

void Security::setPricestep(double value)
{
    m_Pricestep = value;
    m_PricestepIsSet = true;
}

bool Security::pricestepIsSet() const
{
    return m_PricestepIsSet;
}

void Security::unsetPricestep()
{
    m_PricestepIsSet = false;
}
double Security::getPriceMax() const
{
    return m_PriceMax;
}

void Security::setPriceMax(double value)
{
    m_PriceMax = value;
    m_PriceMaxIsSet = true;
}

bool Security::priceMaxIsSet() const
{
    return m_PriceMaxIsSet;
}

void Security::unsetPriceMax()
{
    m_PriceMaxIsSet = false;
}
double Security::getPriceMin() const
{
    return m_PriceMin;
}

void Security::setPriceMin(double value)
{
    m_PriceMin = value;
    m_PriceMinIsSet = true;
}

bool Security::priceMinIsSet() const
{
    return m_PriceMinIsSet;
}

void Security::unsetPriceMin()
{
    m_PriceMinIsSet = false;
}
double Security::getTheorPrice() const
{
    return m_TheorPrice;
}

void Security::setTheorPrice(double value)
{
    m_TheorPrice = value;
    m_TheorPriceIsSet = true;
}

bool Security::theorPriceIsSet() const
{
    return m_TheorPriceIsSet;
}

void Security::unsetTheorPrice()
{
    m_TheorPriceIsSet = false;
}
double Security::getTheorPriceLimit() const
{
    return m_TheorPriceLimit;
}

void Security::setTheorPriceLimit(double value)
{
    m_TheorPriceLimit = value;
    m_TheorPriceLimitIsSet = true;
}

bool Security::theorPriceLimitIsSet() const
{
    return m_TheorPriceLimitIsSet;
}

void Security::unsetTheorPriceLimit()
{
    m_TheorPriceLimitIsSet = false;
}
double Security::getVolatility() const
{
    return m_Volatility;
}

void Security::setVolatility(double value)
{
    m_Volatility = value;
    m_VolatilityIsSet = true;
}

bool Security::volatilityIsSet() const
{
    return m_VolatilityIsSet;
}

void Security::unsetVolatility()
{
    m_VolatilityIsSet = false;
}
utility::string_t Security::getCurrency() const
{
    return m_Currency;
}

void Security::setCurrency(const utility::string_t& value)
{
    m_Currency = value;
    m_CurrencyIsSet = true;
}

bool Security::currencyIsSet() const
{
    return m_CurrencyIsSet;
}

void Security::unsetCurrency()
{
    m_CurrencyIsSet = false;
}
utility::string_t Security::getISIN() const
{
    return m_ISIN;
}

void Security::setISIN(const utility::string_t& value)
{
    m_ISIN = value;
    m_ISINIsSet = true;
}

bool Security::iSINIsSet() const
{
    return m_ISINIsSet;
}

void Security::unsetISIN()
{
    m_ISINIsSet = false;
}
int32_t Security::getYield() const
{
    return m_Yield;
}

void Security::setYield(int32_t value)
{
    m_Yield = value;
    m_YieldIsSet = true;
}

bool Security::yieldIsSet() const
{
    return m_YieldIsSet;
}

void Security::unsetYield()
{
    m_YieldIsSet = false;
}
utility::string_t Security::getPrimaryBoard() const
{
    return m_Primary_board;
}

void Security::setPrimaryBoard(const utility::string_t& value)
{
    m_Primary_board = value;
    m_Primary_boardIsSet = true;
}

bool Security::primaryBoardIsSet() const
{
    return m_Primary_boardIsSet;
}

void Security::unsetPrimary_board()
{
    m_Primary_boardIsSet = false;
}
int32_t Security::getTradingStatus() const
{
    return m_TradingStatus;
}

void Security::setTradingStatus(int32_t value)
{
    m_TradingStatus = value;
    m_TradingStatusIsSet = true;
}

bool Security::tradingStatusIsSet() const
{
    return m_TradingStatusIsSet;
}

void Security::unsetTradingStatus()
{
    m_TradingStatusIsSet = false;
}
utility::string_t Security::getTradingStatusInfo() const
{
    return m_TradingStatusInfo;
}

void Security::setTradingStatusInfo(const utility::string_t& value)
{
    m_TradingStatusInfo = value;
    m_TradingStatusInfoIsSet = true;
}

bool Security::tradingStatusInfoIsSet() const
{
    return m_TradingStatusInfoIsSet;
}

void Security::unsetTradingStatusInfo()
{
    m_TradingStatusInfoIsSet = false;
}
std::shared_ptr<ComplexProductCategory> Security::getComplexProductCategory() const
{
    return m_ComplexProductCategory;
}

void Security::setComplexProductCategory(const std::shared_ptr<ComplexProductCategory>& value)
{
    m_ComplexProductCategory = value;
    m_ComplexProductCategoryIsSet = true;
}

bool Security::complexProductCategoryIsSet() const
{
    return m_ComplexProductCategoryIsSet;
}

void Security::unsetComplexProductCategory()
{
    m_ComplexProductCategoryIsSet = false;
}
}



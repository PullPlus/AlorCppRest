/**
 * Alor OpenAPI V2
 * API для работы с торговой системой АЛОР Брокер. Предоставляет интерфейсы для выставления заявок и получения биржевой информации.  Данные для неавторизованных запросов предоставляются с задержкой от 15 минут, для авторизованных - без задержек.   Публичная биржевая информация может быть получена через HTTP(S) API, а также доступна через однократно установленное WebSocket соединение. <br> **Внимание!** WebSocket соединения могут и будут разрываться *(например, если клиент не успевает обрабатывать сообщения и на стороне API в буфере накопится более 5000 событий)*. <br> Во внешнем ПО необходимо предусмотреть механизмы переподключения и переподписки (при необходимости)! <br> <br>  В OpenAPI V2 доступны \"Московская Биржа\" (MOEX) и \"Биржа СПБ\" (SPBX).   <h4> Доступные типы данных </h4>  * Все сделки  * Все заявки  * Информация по инструментам  * Котировки  * Биржевые стаканы  * Исторические данные  * Позиции  * Информация о клиенте  <h4>Поддерживаемые виды заявок</h4>  * рыночные  * лимитные  * стоп-лосс  * тейк-профит  * стоп-лосс лимит  * тейк-профит лимит  <h4>    Ограничения по частоте запросов     </h4> <p>На текущий момент ограничений по количеству запросов в минуту нет, однако есть ограничение на общее количество подписок (сотни тысяч). При достижении лимита подписок клиент будет заблокирован и в течение нескольких минут не сможет создавать новые подписки. Уже существующие подписки продолжат работать. <br/>  Сервер может обрабатывать \"тяжелые\" запросы (пример - история за все время) и запросы без авторизации с меньшим приоритетом.<br/> </p>  <h4>Получение списка портфелей</h4> <p>Получить список доступных портфелей можно из JWT токена</p> <p>Для получения списка доступных портфелей необходимо декодировать JWT токен. Портфели находятся в поле <b>portfolios</b>.</p> <br/>  <h2> Авторизация </h2>  <h4>OAuth</h4>  <b>Внимание!</b>   JWT и refresh token — равносильны логину и паролю. Их нужно скрывать от публичного доступа.  <h4>Для разработчиков сторонних приложений, в которых торговлю будут вести их пользователи.</h4>  Мы предоставляем сервис для авторизации сторониих приложений по стандарту OAuth 2.0. С примером приложения, использующего OAuth сервис для авторизации пользователей можно ознакомиться в разделе  <a href=\"/examples\">Примеры</a>.  Список разрешений (scopes), которые могут быть выданы приложению: <table>   <tr>     <td><b>OrdersRead</b></td>     <td>Чтение выставленных заявок</td>   </tr>   <tr>     <td><b>OrdersCreate</b></td>     <td>Выставление заявок</td>   </tr>   <tr>     <td><b>Trades</b></td>     <td>Чтение совершенных сделок</td>   </tr>   <tr>     <td><b>Personal</b></td>     <td>Персональная информация: ФИО, почта и т.п.</td>   </tr>   <tr>     <td><b>Stats</b></td>     <td>Статистика: прибыль, средние цены и т.п.</td>   </tr> </table>  <h4>Для ведения операций от своего имени</h4>  Выписать себе <b>refresh token</b> для ведения операций от своего имени [можно здесь](https://alor.dev/open-api-tokens).  <h2>Краткое описание работы с авторизацией</h2>  Чтобы выполнить авторизованный запрос, добавьте в запрос заголовок с именем \"Authorization\" и значением, состоящим из префикса `\"Bearer \"` и валидного JWT токена.  Срок жизни JWT короткий: это сделано для безопасности.  Для большинства вариантов использования API мы рекоммендуем использовать механизм  <b>refresh token</b> .  Механизм  <b>refresh token</b>  позволяет получать JWT с новым сроком жизни. Для этого отправьте POST запрос на адрес `https://oauthdev.alor.ru/refresh?token={refreshToken}` *(тестовый контур)* или `https://oauth.alor.ru/refresh?token={refreshToken}` *(боевой контур)*. Если у  <b>refresh token</b>  не истек срок жизни и не он не был отозван, то в теле ответа в поле AccessToken вернётся свежий JWT токен.   Срок жизни  <b>refresh token</b>, получаемого обычным способом — 1 месяц.   Срок жизни  <b>refresh token</b>, получаемого самостоятельным выписыванием — год.  | |-  > Если мы для вас не завели портфели для ведения торговли в игровом контуре, оставьте заявку на <a href=\"mailto:openapi@alor.ru\">openapi@alor.ru</a> или свяжитесь с нами в [телеграме](https://t.me/AlorOpenAPI).  </br></br> Тестовый контур: `https://apidev.alor.ru`  Боевой контур: `https://api.alor.ru` 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: openapi@alor.ru
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "AlorCppRest/model/Ws_res_QuotesSubscribe_data.h"

namespace alormodel {



Ws_res_QuotesSubscribe_data::Ws_res_QuotesSubscribe_data()
{
    m_Symbol = utility::conversions::to_string_t("");
    m_SymbolIsSet = false;
    m_ExchangeIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_Ask = 0.0;
    m_AskIsSet = false;
    m_Bid = 0.0;
    m_BidIsSet = false;
    m_Prev_close_price = 0.0;
    m_Prev_close_priceIsSet = false;
    m_Last_price = 0.0;
    m_Last_priceIsSet = false;
    m_Last_price_timestamp = 0L;
    m_Last_price_timestampIsSet = false;
    m_Change = 0.0;
    m_ChangeIsSet = false;
    m_Change_percent = 0.0;
    m_Change_percentIsSet = false;
    m_High_price = 0.0;
    m_High_priceIsSet = false;
    m_Low_price = 0.0;
    m_Low_priceIsSet = false;
    m_AccruedInt = 0.0;
    m_AccruedIntIsSet = false;
    m_Accrued_interest = 0.0;
    m_Accrued_interestIsSet = false;
    m_Volume = 0.0;
    m_VolumeIsSet = false;
    m_Open_price = 0.0;
    m_Open_priceIsSet = false;
    m_Yield = 0;
    m_YieldIsSet = false;
    m_Lotsize = 0.0;
    m_LotsizeIsSet = false;
    m_Lotvalue = 0.0;
    m_LotvalueIsSet = false;
    m_Facevalue = 0.0;
    m_FacevalueIsSet = false;
    m_Type = utility::conversions::to_string_t("");
    m_TypeIsSet = false;
}

Ws_res_QuotesSubscribe_data::~Ws_res_QuotesSubscribe_data()
{
}

void Ws_res_QuotesSubscribe_data::validate()
{
    // TODO: implement validation
}

web::json::value Ws_res_QuotesSubscribe_data::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_SymbolIsSet)
    {
        val[utility::conversions::to_string_t(U("symbol"))] = ModelBase::toJson(m_Symbol);
    }
    if(m_ExchangeIsSet)
    {
        val[utility::conversions::to_string_t(U("exchange"))] = ModelBase::toJson(m_Exchange);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t(U("description"))] = ModelBase::toJson(m_Description);
    }
    if(m_AskIsSet)
    {
        val[utility::conversions::to_string_t(U("ask"))] = ModelBase::toJson(m_Ask);
    }
    if(m_BidIsSet)
    {
        val[utility::conversions::to_string_t(U("bid"))] = ModelBase::toJson(m_Bid);
    }
    if(m_Prev_close_priceIsSet)
    {
        val[utility::conversions::to_string_t(U("prev_close_price"))] = ModelBase::toJson(m_Prev_close_price);
    }
    if(m_Last_priceIsSet)
    {
        val[utility::conversions::to_string_t(U("last_price"))] = ModelBase::toJson(m_Last_price);
    }
    if(m_Last_price_timestampIsSet)
    {
        val[utility::conversions::to_string_t(U("last_price_timestamp"))] = ModelBase::toJson(m_Last_price_timestamp);
    }
    if(m_ChangeIsSet)
    {
        val[utility::conversions::to_string_t(U("change"))] = ModelBase::toJson(m_Change);
    }
    if(m_Change_percentIsSet)
    {
        val[utility::conversions::to_string_t(U("change_percent"))] = ModelBase::toJson(m_Change_percent);
    }
    if(m_High_priceIsSet)
    {
        val[utility::conversions::to_string_t(U("high_price"))] = ModelBase::toJson(m_High_price);
    }
    if(m_Low_priceIsSet)
    {
        val[utility::conversions::to_string_t(U("low_price"))] = ModelBase::toJson(m_Low_price);
    }
    if(m_AccruedIntIsSet)
    {
        val[utility::conversions::to_string_t(U("accruedInt"))] = ModelBase::toJson(m_AccruedInt);
    }
    if(m_Accrued_interestIsSet)
    {
        val[utility::conversions::to_string_t(U("accrued_interest"))] = ModelBase::toJson(m_Accrued_interest);
    }
    if(m_VolumeIsSet)
    {
        val[utility::conversions::to_string_t(U("volume"))] = ModelBase::toJson(m_Volume);
    }
    if(m_Open_priceIsSet)
    {
        val[utility::conversions::to_string_t(U("open_price"))] = ModelBase::toJson(m_Open_price);
    }
    if(m_YieldIsSet)
    {
        val[utility::conversions::to_string_t(U("yield"))] = ModelBase::toJson(m_Yield);
    }
    if(m_LotsizeIsSet)
    {
        val[utility::conversions::to_string_t(U("lotsize"))] = ModelBase::toJson(m_Lotsize);
    }
    if(m_LotvalueIsSet)
    {
        val[utility::conversions::to_string_t(U("lotvalue"))] = ModelBase::toJson(m_Lotvalue);
    }
    if(m_FacevalueIsSet)
    {
        val[utility::conversions::to_string_t(U("facevalue"))] = ModelBase::toJson(m_Facevalue);
    }
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t(U("type"))] = ModelBase::toJson(m_Type);
    }

    return val;
}

bool Ws_res_QuotesSubscribe_data::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("symbol"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("symbol")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSymbol;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSymbol);
            setSymbol(refVal_setSymbol);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("exchange"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("exchange")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Exchange> refVal_setExchange;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExchange);
            setExchange(refVal_setExchange);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDescription);
            setDescription(refVal_setDescription);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ask"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ask")));
        if(!fieldValue.is_null())
        {
            double refVal_setAsk;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAsk);
            setAsk(refVal_setAsk);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bid")));
        if(!fieldValue.is_null())
        {
            double refVal_setBid;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBid);
            setBid(refVal_setBid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("prev_close_price"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("prev_close_price")));
        if(!fieldValue.is_null())
        {
            double refVal_setPrevClosePrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPrevClosePrice);
            setPrevClosePrice(refVal_setPrevClosePrice);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("last_price"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("last_price")));
        if(!fieldValue.is_null())
        {
            double refVal_setLastPrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLastPrice);
            setLastPrice(refVal_setLastPrice);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("last_price_timestamp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("last_price_timestamp")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setLastPriceTimestamp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLastPriceTimestamp);
            setLastPriceTimestamp(refVal_setLastPriceTimestamp);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("change"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("change")));
        if(!fieldValue.is_null())
        {
            double refVal_setChange;
            ok &= ModelBase::fromJson(fieldValue, refVal_setChange);
            setChange(refVal_setChange);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("change_percent"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("change_percent")));
        if(!fieldValue.is_null())
        {
            double refVal_setChangePercent;
            ok &= ModelBase::fromJson(fieldValue, refVal_setChangePercent);
            setChangePercent(refVal_setChangePercent);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("high_price"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("high_price")));
        if(!fieldValue.is_null())
        {
            double refVal_setHighPrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHighPrice);
            setHighPrice(refVal_setHighPrice);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("low_price"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("low_price")));
        if(!fieldValue.is_null())
        {
            double refVal_setLowPrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLowPrice);
            setLowPrice(refVal_setLowPrice);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("accruedInt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("accruedInt")));
        if(!fieldValue.is_null())
        {
            double refVal_setAccruedInt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAccruedInt);
            setAccruedInt(refVal_setAccruedInt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("accrued_interest"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("accrued_interest")));
        if(!fieldValue.is_null())
        {
            double refVal_setAccruedInterest;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAccruedInterest);
            setAccruedInterest(refVal_setAccruedInterest);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("volume"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("volume")));
        if(!fieldValue.is_null())
        {
            double refVal_setVolume;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVolume);
            setVolume(refVal_setVolume);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("open_price"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("open_price")));
        if(!fieldValue.is_null())
        {
            double refVal_setOpenPrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOpenPrice);
            setOpenPrice(refVal_setOpenPrice);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("yield"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("yield")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setYield;
            ok &= ModelBase::fromJson(fieldValue, refVal_setYield);
            setYield(refVal_setYield);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("lotsize"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("lotsize")));
        if(!fieldValue.is_null())
        {
            double refVal_setLotsize;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLotsize);
            setLotsize(refVal_setLotsize);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("lotvalue"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("lotvalue")));
        if(!fieldValue.is_null())
        {
            double refVal_setLotvalue;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLotvalue);
            setLotvalue(refVal_setLotvalue);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("facevalue"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("facevalue")));
        if(!fieldValue.is_null())
        {
            double refVal_setFacevalue;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFacevalue);
            setFacevalue(refVal_setFacevalue);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setType);
            setType(refVal_setType);
        }
    }
    return ok;
}

void Ws_res_QuotesSubscribe_data::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_SymbolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("symbol")), m_Symbol));
    }
    if(m_ExchangeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("exchange")), m_Exchange));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("description")), m_Description));
    }
    if(m_AskIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ask")), m_Ask));
    }
    if(m_BidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bid")), m_Bid));
    }
    if(m_Prev_close_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("prev_close_price")), m_Prev_close_price));
    }
    if(m_Last_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("last_price")), m_Last_price));
    }
    if(m_Last_price_timestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("last_price_timestamp")), m_Last_price_timestamp));
    }
    if(m_ChangeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("change")), m_Change));
    }
    if(m_Change_percentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("change_percent")), m_Change_percent));
    }
    if(m_High_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("high_price")), m_High_price));
    }
    if(m_Low_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("low_price")), m_Low_price));
    }
    if(m_AccruedIntIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("accruedInt")), m_AccruedInt));
    }
    if(m_Accrued_interestIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("accrued_interest")), m_Accrued_interest));
    }
    if(m_VolumeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("volume")), m_Volume));
    }
    if(m_Open_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("open_price")), m_Open_price));
    }
    if(m_YieldIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("yield")), m_Yield));
    }
    if(m_LotsizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("lotsize")), m_Lotsize));
    }
    if(m_LotvalueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("lotvalue")), m_Lotvalue));
    }
    if(m_FacevalueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("facevalue")), m_Facevalue));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("type")), m_Type));
    }
}

bool Ws_res_QuotesSubscribe_data::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("symbol"))))
    {
        utility::string_t refVal_setSymbol;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("symbol"))), refVal_setSymbol );
        setSymbol(refVal_setSymbol);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("exchange"))))
    {
        std::shared_ptr<Exchange> refVal_setExchange;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("exchange"))), refVal_setExchange );
        setExchange(refVal_setExchange);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("description"))))
    {
        utility::string_t refVal_setDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("description"))), refVal_setDescription );
        setDescription(refVal_setDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ask"))))
    {
        double refVal_setAsk;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ask"))), refVal_setAsk );
        setAsk(refVal_setAsk);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bid"))))
    {
        double refVal_setBid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bid"))), refVal_setBid );
        setBid(refVal_setBid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("prev_close_price"))))
    {
        double refVal_setPrevClosePrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("prev_close_price"))), refVal_setPrevClosePrice );
        setPrevClosePrice(refVal_setPrevClosePrice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("last_price"))))
    {
        double refVal_setLastPrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("last_price"))), refVal_setLastPrice );
        setLastPrice(refVal_setLastPrice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("last_price_timestamp"))))
    {
        int64_t refVal_setLastPriceTimestamp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("last_price_timestamp"))), refVal_setLastPriceTimestamp );
        setLastPriceTimestamp(refVal_setLastPriceTimestamp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("change"))))
    {
        double refVal_setChange;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("change"))), refVal_setChange );
        setChange(refVal_setChange);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("change_percent"))))
    {
        double refVal_setChangePercent;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("change_percent"))), refVal_setChangePercent );
        setChangePercent(refVal_setChangePercent);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("high_price"))))
    {
        double refVal_setHighPrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("high_price"))), refVal_setHighPrice );
        setHighPrice(refVal_setHighPrice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("low_price"))))
    {
        double refVal_setLowPrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("low_price"))), refVal_setLowPrice );
        setLowPrice(refVal_setLowPrice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("accruedInt"))))
    {
        double refVal_setAccruedInt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("accruedInt"))), refVal_setAccruedInt );
        setAccruedInt(refVal_setAccruedInt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("accrued_interest"))))
    {
        double refVal_setAccruedInterest;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("accrued_interest"))), refVal_setAccruedInterest );
        setAccruedInterest(refVal_setAccruedInterest);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("volume"))))
    {
        double refVal_setVolume;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("volume"))), refVal_setVolume );
        setVolume(refVal_setVolume);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("open_price"))))
    {
        double refVal_setOpenPrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("open_price"))), refVal_setOpenPrice );
        setOpenPrice(refVal_setOpenPrice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("yield"))))
    {
        int32_t refVal_setYield;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("yield"))), refVal_setYield );
        setYield(refVal_setYield);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("lotsize"))))
    {
        double refVal_setLotsize;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("lotsize"))), refVal_setLotsize );
        setLotsize(refVal_setLotsize);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("lotvalue"))))
    {
        double refVal_setLotvalue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("lotvalue"))), refVal_setLotvalue );
        setLotvalue(refVal_setLotvalue);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("facevalue"))))
    {
        double refVal_setFacevalue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("facevalue"))), refVal_setFacevalue );
        setFacevalue(refVal_setFacevalue);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("type"))))
    {
        utility::string_t refVal_setType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("type"))), refVal_setType );
        setType(refVal_setType);
    }
    return ok;
}

utility::string_t Ws_res_QuotesSubscribe_data::getSymbol() const
{
    return m_Symbol;
}

void Ws_res_QuotesSubscribe_data::setSymbol(const utility::string_t& value)
{
    m_Symbol = value;
    m_SymbolIsSet = true;
}

bool Ws_res_QuotesSubscribe_data::symbolIsSet() const
{
    return m_SymbolIsSet;
}

void Ws_res_QuotesSubscribe_data::unsetSymbol()
{
    m_SymbolIsSet = false;
}
std::shared_ptr<Exchange> Ws_res_QuotesSubscribe_data::getExchange() const
{
    return m_Exchange;
}

void Ws_res_QuotesSubscribe_data::setExchange(const std::shared_ptr<Exchange>& value)
{
    m_Exchange = value;
    m_ExchangeIsSet = true;
}

bool Ws_res_QuotesSubscribe_data::exchangeIsSet() const
{
    return m_ExchangeIsSet;
}

void Ws_res_QuotesSubscribe_data::unsetExchange()
{
    m_ExchangeIsSet = false;
}
utility::string_t Ws_res_QuotesSubscribe_data::getDescription() const
{
    return m_Description;
}

void Ws_res_QuotesSubscribe_data::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool Ws_res_QuotesSubscribe_data::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void Ws_res_QuotesSubscribe_data::unsetDescription()
{
    m_DescriptionIsSet = false;
}
double Ws_res_QuotesSubscribe_data::getAsk() const
{
    return m_Ask;
}

void Ws_res_QuotesSubscribe_data::setAsk(double value)
{
    m_Ask = value;
    m_AskIsSet = true;
}

bool Ws_res_QuotesSubscribe_data::askIsSet() const
{
    return m_AskIsSet;
}

void Ws_res_QuotesSubscribe_data::unsetAsk()
{
    m_AskIsSet = false;
}
double Ws_res_QuotesSubscribe_data::getBid() const
{
    return m_Bid;
}

void Ws_res_QuotesSubscribe_data::setBid(double value)
{
    m_Bid = value;
    m_BidIsSet = true;
}

bool Ws_res_QuotesSubscribe_data::bidIsSet() const
{
    return m_BidIsSet;
}

void Ws_res_QuotesSubscribe_data::unsetBid()
{
    m_BidIsSet = false;
}
double Ws_res_QuotesSubscribe_data::getPrevClosePrice() const
{
    return m_Prev_close_price;
}

void Ws_res_QuotesSubscribe_data::setPrevClosePrice(double value)
{
    m_Prev_close_price = value;
    m_Prev_close_priceIsSet = true;
}

bool Ws_res_QuotesSubscribe_data::prevClosePriceIsSet() const
{
    return m_Prev_close_priceIsSet;
}

void Ws_res_QuotesSubscribe_data::unsetPrev_close_price()
{
    m_Prev_close_priceIsSet = false;
}
double Ws_res_QuotesSubscribe_data::getLastPrice() const
{
    return m_Last_price;
}

void Ws_res_QuotesSubscribe_data::setLastPrice(double value)
{
    m_Last_price = value;
    m_Last_priceIsSet = true;
}

bool Ws_res_QuotesSubscribe_data::lastPriceIsSet() const
{
    return m_Last_priceIsSet;
}

void Ws_res_QuotesSubscribe_data::unsetLast_price()
{
    m_Last_priceIsSet = false;
}
int64_t Ws_res_QuotesSubscribe_data::getLastPriceTimestamp() const
{
    return m_Last_price_timestamp;
}

void Ws_res_QuotesSubscribe_data::setLastPriceTimestamp(int64_t value)
{
    m_Last_price_timestamp = value;
    m_Last_price_timestampIsSet = true;
}

bool Ws_res_QuotesSubscribe_data::lastPriceTimestampIsSet() const
{
    return m_Last_price_timestampIsSet;
}

void Ws_res_QuotesSubscribe_data::unsetLast_price_timestamp()
{
    m_Last_price_timestampIsSet = false;
}
double Ws_res_QuotesSubscribe_data::getChange() const
{
    return m_Change;
}

void Ws_res_QuotesSubscribe_data::setChange(double value)
{
    m_Change = value;
    m_ChangeIsSet = true;
}

bool Ws_res_QuotesSubscribe_data::changeIsSet() const
{
    return m_ChangeIsSet;
}

void Ws_res_QuotesSubscribe_data::unsetChange()
{
    m_ChangeIsSet = false;
}
double Ws_res_QuotesSubscribe_data::getChangePercent() const
{
    return m_Change_percent;
}

void Ws_res_QuotesSubscribe_data::setChangePercent(double value)
{
    m_Change_percent = value;
    m_Change_percentIsSet = true;
}

bool Ws_res_QuotesSubscribe_data::changePercentIsSet() const
{
    return m_Change_percentIsSet;
}

void Ws_res_QuotesSubscribe_data::unsetChange_percent()
{
    m_Change_percentIsSet = false;
}
double Ws_res_QuotesSubscribe_data::getHighPrice() const
{
    return m_High_price;
}

void Ws_res_QuotesSubscribe_data::setHighPrice(double value)
{
    m_High_price = value;
    m_High_priceIsSet = true;
}

bool Ws_res_QuotesSubscribe_data::highPriceIsSet() const
{
    return m_High_priceIsSet;
}

void Ws_res_QuotesSubscribe_data::unsetHigh_price()
{
    m_High_priceIsSet = false;
}
double Ws_res_QuotesSubscribe_data::getLowPrice() const
{
    return m_Low_price;
}

void Ws_res_QuotesSubscribe_data::setLowPrice(double value)
{
    m_Low_price = value;
    m_Low_priceIsSet = true;
}

bool Ws_res_QuotesSubscribe_data::lowPriceIsSet() const
{
    return m_Low_priceIsSet;
}

void Ws_res_QuotesSubscribe_data::unsetLow_price()
{
    m_Low_priceIsSet = false;
}
double Ws_res_QuotesSubscribe_data::getAccruedInt() const
{
    return m_AccruedInt;
}

void Ws_res_QuotesSubscribe_data::setAccruedInt(double value)
{
    m_AccruedInt = value;
    m_AccruedIntIsSet = true;
}

bool Ws_res_QuotesSubscribe_data::accruedIntIsSet() const
{
    return m_AccruedIntIsSet;
}

void Ws_res_QuotesSubscribe_data::unsetAccruedInt()
{
    m_AccruedIntIsSet = false;
}
double Ws_res_QuotesSubscribe_data::getAccruedInterest() const
{
    return m_Accrued_interest;
}

void Ws_res_QuotesSubscribe_data::setAccruedInterest(double value)
{
    m_Accrued_interest = value;
    m_Accrued_interestIsSet = true;
}

bool Ws_res_QuotesSubscribe_data::accruedInterestIsSet() const
{
    return m_Accrued_interestIsSet;
}

void Ws_res_QuotesSubscribe_data::unsetAccrued_interest()
{
    m_Accrued_interestIsSet = false;
}
double Ws_res_QuotesSubscribe_data::getVolume() const
{
    return m_Volume;
}

void Ws_res_QuotesSubscribe_data::setVolume(double value)
{
    m_Volume = value;
    m_VolumeIsSet = true;
}

bool Ws_res_QuotesSubscribe_data::volumeIsSet() const
{
    return m_VolumeIsSet;
}

void Ws_res_QuotesSubscribe_data::unsetVolume()
{
    m_VolumeIsSet = false;
}
double Ws_res_QuotesSubscribe_data::getOpenPrice() const
{
    return m_Open_price;
}

void Ws_res_QuotesSubscribe_data::setOpenPrice(double value)
{
    m_Open_price = value;
    m_Open_priceIsSet = true;
}

bool Ws_res_QuotesSubscribe_data::openPriceIsSet() const
{
    return m_Open_priceIsSet;
}

void Ws_res_QuotesSubscribe_data::unsetOpen_price()
{
    m_Open_priceIsSet = false;
}
int32_t Ws_res_QuotesSubscribe_data::getYield() const
{
    return m_Yield;
}

void Ws_res_QuotesSubscribe_data::setYield(int32_t value)
{
    m_Yield = value;
    m_YieldIsSet = true;
}

bool Ws_res_QuotesSubscribe_data::yieldIsSet() const
{
    return m_YieldIsSet;
}

void Ws_res_QuotesSubscribe_data::unsetYield()
{
    m_YieldIsSet = false;
}
double Ws_res_QuotesSubscribe_data::getLotsize() const
{
    return m_Lotsize;
}

void Ws_res_QuotesSubscribe_data::setLotsize(double value)
{
    m_Lotsize = value;
    m_LotsizeIsSet = true;
}

bool Ws_res_QuotesSubscribe_data::lotsizeIsSet() const
{
    return m_LotsizeIsSet;
}

void Ws_res_QuotesSubscribe_data::unsetLotsize()
{
    m_LotsizeIsSet = false;
}
double Ws_res_QuotesSubscribe_data::getLotvalue() const
{
    return m_Lotvalue;
}

void Ws_res_QuotesSubscribe_data::setLotvalue(double value)
{
    m_Lotvalue = value;
    m_LotvalueIsSet = true;
}

bool Ws_res_QuotesSubscribe_data::lotvalueIsSet() const
{
    return m_LotvalueIsSet;
}

void Ws_res_QuotesSubscribe_data::unsetLotvalue()
{
    m_LotvalueIsSet = false;
}
double Ws_res_QuotesSubscribe_data::getFacevalue() const
{
    return m_Facevalue;
}

void Ws_res_QuotesSubscribe_data::setFacevalue(double value)
{
    m_Facevalue = value;
    m_FacevalueIsSet = true;
}

bool Ws_res_QuotesSubscribe_data::facevalueIsSet() const
{
    return m_FacevalueIsSet;
}

void Ws_res_QuotesSubscribe_data::unsetFacevalue()
{
    m_FacevalueIsSet = false;
}
utility::string_t Ws_res_QuotesSubscribe_data::getType() const
{
    return m_Type;
}

void Ws_res_QuotesSubscribe_data::setType(const utility::string_t& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool Ws_res_QuotesSubscribe_data::typeIsSet() const
{
    return m_TypeIsSet;
}

void Ws_res_QuotesSubscribe_data::unsetType()
{
    m_TypeIsSet = false;
}
}



/**
 * Alor OpenAPI V2
 * API для работы с торговой системой АЛОР Брокер. Предоставляет интерфейсы для выставления заявок и получения биржевой информации.  Данные для неавторизованных запросов предоставляются с задержкой от 15 минут, для авторизованных - без задержек.   Публичная биржевая информация может быть получена через HTTP(S) API, а также доступна через однократно установленное WebSocket соединение. <br> **Внимание!** WebSocket соединения могут и будут разрываться *(например, если клиент не успевает обрабатывать сообщения и на стороне API в буфере накопится более 5000 событий)*. <br> Во внешнем ПО необходимо предусмотреть механизмы переподключения и переподписки (при необходимости)! <br> <br>  В OpenAPI V2 доступны \"Московская Биржа\" (MOEX) и \"Биржа СПБ\" (SPBX).   <h4> Доступные типы данных </h4>  * Все сделки  * Все заявки  * Информация по инструментам  * Котировки  * Биржевые стаканы  * Исторические данные  * Позиции  * Информация о клиенте  <h4>Поддерживаемые виды заявок</h4>  * рыночные  * лимитные  * стоп-лосс  * тейк-профит  * стоп-лосс лимит  * тейк-профит лимит  <h4>    Ограничения по частоте запросов     </h4> <p>На текущий момент ограничений по количеству запросов в минуту нет, однако есть ограничение на общее количество подписок (сотни тысяч). При достижении лимита подписок клиент будет заблокирован и в течение нескольких минут не сможет создавать новые подписки. Уже существующие подписки продолжат работать. <br/>  Сервер может обрабатывать \"тяжелые\" запросы (пример - история за все время) и запросы без авторизации с меньшим приоритетом.<br/> </p>  <h4>Получение списка портфелей</h4> <p>Получить список доступных портфелей можно из JWT токена</p> <p>Для получения списка доступных портфелей необходимо декодировать JWT токен. Портфели находятся в поле <b>portfolios</b>.</p> <br/>  <h2> Авторизация </h2>  <h4>OAuth</h4>  <b>Внимание!</b>   JWT и refresh token — равносильны логину и паролю. Их нужно скрывать от публичного доступа.  <h4>Для разработчиков сторонних приложений, в которых торговлю будут вести их пользователи.</h4>  Мы предоставляем сервис для авторизации сторониих приложений по стандарту OAuth 2.0. С примером приложения, использующего OAuth сервис для авторизации пользователей можно ознакомиться в разделе  <a href=\"/examples\">Примеры</a>.  Список разрешений (scopes), которые могут быть выданы приложению: <table>   <tr>     <td><b>OrdersRead</b></td>     <td>Чтение выставленных заявок</td>   </tr>   <tr>     <td><b>OrdersCreate</b></td>     <td>Выставление заявок</td>   </tr>   <tr>     <td><b>Trades</b></td>     <td>Чтение совершенных сделок</td>   </tr>   <tr>     <td><b>Personal</b></td>     <td>Персональная информация: ФИО, почта и т.п.</td>   </tr>   <tr>     <td><b>Stats</b></td>     <td>Статистика: прибыль, средние цены и т.п.</td>   </tr> </table>  <h4>Для ведения операций от своего имени</h4>  Выписать себе <b>refresh token</b> для ведения операций от своего имени [можно здесь](https://alor.dev/open-api-tokens).  <h2>Краткое описание работы с авторизацией</h2>  Чтобы выполнить авторизованный запрос, добавьте в запрос заголовок с именем \"Authorization\" и значением, состоящим из префикса `\"Bearer \"` и валидного JWT токена.  Срок жизни JWT короткий: это сделано для безопасности.  Для большинства вариантов использования API мы рекоммендуем использовать механизм  <b>refresh token</b> .  Механизм  <b>refresh token</b>  позволяет получать JWT с новым сроком жизни. Для этого отправьте POST запрос на адрес `https://oauthdev.alor.ru/refresh?token={refreshToken}` *(тестовый контур)* или `https://oauth.alor.ru/refresh?token={refreshToken}` *(боевой контур)*. Если у  <b>refresh token</b>  не истек срок жизни и не он не был отозван, то в теле ответа в поле AccessToken вернётся свежий JWT токен.   Срок жизни  <b>refresh token</b>, получаемого обычным способом — 1 месяц.   Срок жизни  <b>refresh token</b>, получаемого самостоятельным выписыванием — год.  | |-  > Если мы для вас не завели портфели для ведения торговли в игровом контуре, оставьте заявку на <a href=\"mailto:openapi@alor.ru\">openapi@alor.ru</a> или свяжитесь с нами в [телеграме](https://t.me/AlorOpenAPI).  </br></br> Тестовый контур: `https://apidev.alor.ru`  Боевой контур: `https://api.alor.ru` 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: openapi@alor.ru
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * SubscriptionsApi.h
 *
 * 
 */

#ifndef ALORAPI_SubscriptionsApi_H_
#define ALORAPI_SubscriptionsApi_H_



#include "AlorCppRest/ApiClient.h"

#include "AlorCppRest/model/Alltrade.h"
#include "AlorCppRest/model/Ws_req_AllTradesGetAndSubscribe.h"
#include "AlorCppRest/model/Ws_req_BarsGetAndSubscribe.h"
#include "AlorCppRest/model/Ws_req_InstrumentsGetAndSubscribeV2.h"
#include "AlorCppRest/model/Ws_req_OrderBookGetAndSubscribe.h"
#include "AlorCppRest/model/Ws_req_OrdersGetAndSubscribe.h"
#include "AlorCppRest/model/Ws_req_PositionsGetAndSubscribe.h"
#include "AlorCppRest/model/Ws_req_QuotesSubscribe.h"
#include "AlorCppRest/model/Ws_req_RisksGetAndSubscribe.h"
#include "AlorCppRest/model/Ws_req_SpectraRisksGetAndSubscribe.h"
#include "AlorCppRest/model/Ws_req_StopOrdersGetAndSubscribeV2.h"
#include "AlorCppRest/model/Ws_req_SummariesGetAndSubscribeV2.h"
#include "AlorCppRest/model/Ws_req_TradesGetAndSubscribe.h"
#include "AlorCppRest/model/Ws_req_Unsubscribe.h"
#include "AlorCppRest/model/Ws_res_BarsGetAndSubscribe.h"
#include "AlorCppRest/model/Ws_res_HandledSuccessfully.h"
#include "AlorCppRest/model/Ws_res_OrderBookGetAndSubscribe.h"
#include "AlorCppRest/model/Ws_res_OrdersGetAndSubscribe.h"
#include "AlorCppRest/model/Ws_res_PositionsGetAndSubscribe.h"
#include "AlorCppRest/model/Ws_res_QuotesSubscribe.h"
#include "AlorCppRest/model/Ws_res_RisksGetAndSubscribe.h"
#include "AlorCppRest/model/Ws_res_SpectraRisksGetAndSubscribe.h"
#include "AlorCppRest/model/Ws_res_StopOrdersGetAndSubscribeWarp.h"
#include "AlorCppRest/model/Ws_res_SummariesGetAndSubscribeV2.h"
#include "AlorCppRest/model/Ws_res_TradesGetAndSubscribe.h"
#include <boost/optional.hpp>

namespace alorapi {

using namespace alormodel;



class  SubscriptionsApi 
{
public:

    explicit SubscriptionsApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~SubscriptionsApi();

    /// <summary>
    /// WebSocket подписка на все сделки
    /// </summary>
    /// <remarks>
    /// **Web Socket** запрос выполняется по URL &#x60;wss://api.alor.ru/ws&#x60; (бой) или &#x60;wss://apidev.alor.ru/ws&#x60; (тест).&lt;br&gt; Подписка на информацию о всех сделках. 
    /// </remarks>
    /// <param name="wsReqAllTradesGetAndSubscribe"></param>
    pplx::task<std::shared_ptr<Ws_res_HandledSuccessfully>> wSProdAllTradesGetAndSubscribe(
        std::shared_ptr<Ws_req_AllTradesGetAndSubscribe> wsReqAllTradesGetAndSubscribe
    ) const;
    /// <summary>
    /// WebSocket подписка на историю цен (свечи)
    /// </summary>
    /// <remarks>
    /// **Web Socket** запрос выполняется по URL &#x60;wss://api.alor.ru/ws&#x60; (бой) или &#x60;wss://apidev.alor.ru/ws&#x60; (тест).&lt;br&gt; Подписка на историю цен (свечи) для выбранных биржи и финансового инструмента.  
    /// </remarks>
    /// <param name="wsReqBarsGetAndSubscribe"></param>
    pplx::task<std::shared_ptr<Ws_res_HandledSuccessfully>> wSProdBarsGet(
        std::shared_ptr<Ws_req_BarsGetAndSubscribe> wsReqBarsGetAndSubscribe
    ) const;
    /// <summary>
    /// WebSocket подписка на изменение информации о финансовых инструментах
    /// </summary>
    /// <remarks>
    /// **Web Socket** запрос выполняется по URL &#x60;wss://api.alor.ru/ws&#x60; (бой) или &#x60;wss://apidev.alor.ru/ws&#x60; (тест).&lt;br&gt; Подписка на изменение информации о финансовых инструментах на выбранной бирже. 
    /// </remarks>
    /// <param name="wsReqInstrumentsGetAndSubscribeV2"></param>
    pplx::task<std::shared_ptr<Ws_res_HandledSuccessfully>> wSProdInstrumentsGetAndSubscribeV2(
        std::shared_ptr<Ws_req_InstrumentsGetAndSubscribeV2> wsReqInstrumentsGetAndSubscribeV2
    ) const;
    /// <summary>
    /// WebSocket подписка на \&quot;биржевой стакан\&quot;
    /// </summary>
    /// <remarks>
    /// **Web Socket** запрос выполняется по URL &#x60;wss://api.alor.ru/ws&#x60; (бой) или &#x60;wss://apidev.alor.ru/ws&#x60; (тест).&lt;br&gt;  Подписка на информацию о биржевом стакане для выбранных биржи и финансового инструмента.&lt;br&gt;  Поддерживаются только авторизованные запросы. 
    /// </remarks>
    /// <param name="wsReqOrderBookGetAndSubscribe"></param>
    pplx::task<std::shared_ptr<Ws_res_HandledSuccessfully>> wSProdOrderBook(
        std::shared_ptr<Ws_req_OrderBookGetAndSubscribe> wsReqOrderBookGetAndSubscribe
    ) const;
    /// <summary>
    /// WebSocket подписка на информацию о заявках
    /// </summary>
    /// <remarks>
    /// **Web Socket** запрос выполняется по URL &#x60;wss://api.alor.ru/ws&#x60; (бой) или &#x60;wss://apidev.alor.ru/ws&#x60; (тест).&lt;br&gt; Подписка на информацию о текущих заявках на рынке для выбранных биржи и финансового инструмента. 
    /// </remarks>
    /// <param name="wsReqOrdersGetAndSubscribe"></param>
    pplx::task<std::shared_ptr<Ws_res_HandledSuccessfully>> wSProdOrdersSubscribe(
        std::shared_ptr<Ws_req_OrdersGetAndSubscribe> wsReqOrdersGetAndSubscribe
    ) const;
    /// <summary>
    /// WebSocket подписка на информацию о текущих позициях по торговым инструментам и деньгам
    /// </summary>
    /// <remarks>
    /// **Web Socket** запрос выполняется по URL &#x60;wss://api.alor.ru/ws&#x60; (бой) или &#x60;wss://apidev.alor.ru/ws&#x60; (тест).&lt;br&gt; Подписка на информацию о текущих позициях по ценным бумагам и деньгам.  
    /// </remarks>
    /// <param name="wsReqPositionsGetAndSubscribe"></param>
    pplx::task<std::shared_ptr<Ws_res_HandledSuccessfully>> wSProdPositionsSubscribe(
        std::shared_ptr<Ws_req_PositionsGetAndSubscribe> wsReqPositionsGetAndSubscribe
    ) const;
    /// <summary>
    /// WebSocket подписка на информацию о котировках
    /// </summary>
    /// <remarks>
    /// **Web Socket** запрос выполняется по URL &#x60;wss://api.alor.ru/ws&#x60; (бой) или &#x60;wss://apidev.alor.ru/ws&#x60; (тест).&lt;br&gt; Подписка на информацию о котировках для выбранных инструментов и бирж. 
    /// </remarks>
    /// <param name="wsReqQuotesSubscribe"></param>
    pplx::task<std::shared_ptr<Ws_res_HandledSuccessfully>> wSProdQuotesSubscribe(
        std::shared_ptr<Ws_req_QuotesSubscribe> wsReqQuotesSubscribe
    ) const;
    /// <summary>
    /// WebSocket подписка на информацию по портфельным рискам
    /// </summary>
    /// <remarks>
    /// **Web Socket** запрос выполняется по URL &#x60;wss://api.alor.ru/ws&#x60; (бой) или &#x60;wss://apidev.alor.ru/ws&#x60; (тест).&lt;br&gt; Подписка на сводную информацию по портфельным рискам. 
    /// </remarks>
    /// <param name="wsReqRisksGetAndSubscribe"></param>
    pplx::task<std::shared_ptr<Ws_res_HandledSuccessfully>> wSProdRisksGetAndSubscribe(
        std::shared_ptr<Ws_req_RisksGetAndSubscribe> wsReqRisksGetAndSubscribe
    ) const;
    /// <summary>
    /// WebSocket подписка на информацию по рискам срочного рынка (FORTS)
    /// </summary>
    /// <remarks>
    /// **Web Socket** запрос выполняется по URL &#x60;wss://api.alor.ru/ws&#x60; (бой) или &#x60;wss://apidev.alor.ru/ws&#x60; (тест).&lt;br&gt; Подписка на информацию по рискам срочного рынка (FORTS). 
    /// </remarks>
    /// <param name="wsReqSpectraRisksGetAndSubscribe"></param>
    pplx::task<std::shared_ptr<Ws_res_HandledSuccessfully>> wSProdSpectraRisksGetAndSubscribe(
        std::shared_ptr<Ws_req_SpectraRisksGetAndSubscribe> wsReqSpectraRisksGetAndSubscribe
    ) const;
    /// <summary>
    /// WebSocket подписка на информацию о стоп-заявках
    /// </summary>
    /// <remarks>
    /// **Web Socket** запрос выполняется по URL &#x60;wss://api.alor.ru/ws&#x60; (бой) или &#x60;wss://apidev.alor.ru/ws&#x60; (тест).&lt;br&gt; Подписка на информацию о текущих заявках на рынке для выбранных биржи и финансового инструмента. 
    /// </remarks>
    /// <param name="wsReqStopOrdersGetAndSubscribeV2"></param>
    pplx::task<std::shared_ptr<Ws_res_HandledSuccessfully>> wSProdStopOrdersSubscribeV2(
        std::shared_ptr<Ws_req_StopOrdersGetAndSubscribeV2> wsReqStopOrdersGetAndSubscribeV2
    ) const;
    /// <summary>
    /// WebSocket подписка на сводную информацию по портфелю
    /// </summary>
    /// <remarks>
    /// **Web Socket** запрос выполняется по URL &#x60;wss://api.alor.ru/ws&#x60; (бой) или &#x60;wss://apidev.alor.ru/ws&#x60; (тест).&lt;br&gt; Подписка на сводную информацию по портфелю. 
    /// </remarks>
    /// <param name="wsReqSummariesGetAndSubscribeV2"></param>
    pplx::task<std::shared_ptr<Ws_res_HandledSuccessfully>> wSProdSummariesGetAndSubscribeV2(
        std::shared_ptr<Ws_req_SummariesGetAndSubscribeV2> wsReqSummariesGetAndSubscribeV2
    ) const;
    /// <summary>
    /// WebSocket подписка на сделки
    /// </summary>
    /// <remarks>
    /// **Web Socket** запрос выполняется по URL &#x60;wss://api.alor.ru/ws&#x60; (бой) или &#x60;wss://apidev.alor.ru/ws&#x60; (тест).&lt;br&gt; Подписка на информацию о сделках. 
    /// </remarks>
    /// <param name="wsReqTradesGetAndSubscribe"></param>
    pplx::task<std::shared_ptr<Ws_res_HandledSuccessfully>> wSProdTradesSubscribe(
        std::shared_ptr<Ws_req_TradesGetAndSubscribe> wsReqTradesGetAndSubscribe
    ) const;
    /// <summary>
    /// WebSocket отмена существующей подписки
    /// </summary>
    /// <remarks>
    /// **Web Socket** запрос выполняется по URL &#x60;wss://api.alor.ru/ws&#x60; (бой) или &#x60;wss://apidev.alor.ru/ws&#x60; (тест). 
    /// </remarks>
    /// <param name="wsReqUnsubscribe"></param>
    pplx::task<std::shared_ptr<Ws_res_HandledSuccessfully>> wSProdUnsubscribe(
        std::shared_ptr<Ws_req_Unsubscribe> wsReqUnsubscribe
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}

#endif /* ALORAPI_SubscriptionsApi_H_ */


/**
 * Alor OpenAPI V2
 * API для работы с торговой системой АЛОР Брокер. Предоставляет интерфейсы для выставления заявок и получения биржевой информации.  Данные для неавторизованных запросов предоставляются с задержкой от 15 минут, для авторизованных - без задержек.   Публичная биржевая информация может быть получена через HTTP(S) API, а также доступна через однократно установленное WebSocket соединение. <br> **Внимание!** WebSocket соединения могут и будут разрываться *(например, если клиент не успевает обрабатывать сообщения и на стороне API в буфере накопится более 5000 событий)*. <br> Во внешнем ПО необходимо предусмотреть механизмы переподключения и переподписки (при необходимости)! <br> <br>  В OpenAPI V2 доступны \"Московская Биржа\" (MOEX) и \"Биржа СПБ\" (SPBX).   <h4> Доступные типы данных </h4>  * Все сделки  * Все заявки  * Информация по инструментам  * Котировки  * Биржевые стаканы  * Исторические данные  * Позиции  * Информация о клиенте  <h4>Поддерживаемые виды заявок</h4>  * рыночные  * лимитные  * стоп-лосс  * тейк-профит  * стоп-лосс лимит  * тейк-профит лимит  <h4>    Ограничения по частоте запросов     </h4> <p>На текущий момент ограничений по количеству запросов в минуту нет, однако есть ограничение на общее количество подписок (сотни тысяч). При достижении лимита подписок клиент будет заблокирован и в течение нескольких минут не сможет создавать новые подписки. Уже существующие подписки продолжат работать. <br/>  Сервер может обрабатывать \"тяжелые\" запросы (пример - история за все время) и запросы без авторизации с меньшим приоритетом.<br/> </p>  <h4>Получение списка портфелей</h4> <p>Получить список доступных портфелей можно из JWT токена</p> <p>Для получения списка доступных портфелей необходимо декодировать JWT токен. Портфели находятся в поле <b>portfolios</b>.</p> <br/>  <h2> Авторизация </h2>  <h4>OAuth</h4>  <b>Внимание!</b>   JWT и refresh token — равносильны логину и паролю. Их нужно скрывать от публичного доступа.  <h4>Для разработчиков сторонних приложений, в которых торговлю будут вести их пользователи.</h4>  Мы предоставляем сервис для авторизации сторониих приложений по стандарту OAuth 2.0. С примером приложения, использующего OAuth сервис для авторизации пользователей можно ознакомиться в разделе  <a href=\"/examples\">Примеры</a>.  Список разрешений (scopes), которые могут быть выданы приложению: <table>   <tr>     <td><b>OrdersRead</b></td>     <td>Чтение выставленных заявок</td>   </tr>   <tr>     <td><b>OrdersCreate</b></td>     <td>Выставление заявок</td>   </tr>   <tr>     <td><b>Trades</b></td>     <td>Чтение совершенных сделок</td>   </tr>   <tr>     <td><b>Personal</b></td>     <td>Персональная информация: ФИО, почта и т.п.</td>   </tr>   <tr>     <td><b>Stats</b></td>     <td>Статистика: прибыль, средние цены и т.п.</td>   </tr> </table>  <h4>Для ведения операций от своего имени</h4>  Выписать себе <b>refresh token</b> для ведения операций от своего имени [можно здесь](https://alor.dev/open-api-tokens).  <h2>Краткое описание работы с авторизацией</h2>  Чтобы выполнить авторизованный запрос, добавьте в запрос заголовок с именем \"Authorization\" и значением, состоящим из префикса `\"Bearer \"` и валидного JWT токена.  Срок жизни JWT короткий: это сделано для безопасности.  Для большинства вариантов использования API мы рекоммендуем использовать механизм  <b>refresh token</b> .  Механизм  <b>refresh token</b>  позволяет получать JWT с новым сроком жизни. Для этого отправьте POST запрос на адрес `https://oauthdev.alor.ru/refresh?token={refreshToken}` *(тестовый контур)* или `https://oauth.alor.ru/refresh?token={refreshToken}` *(боевой контур)*. Если у  <b>refresh token</b>  не истек срок жизни и не он не был отозван, то в теле ответа в поле AccessToken вернётся свежий JWT токен.   Срок жизни  <b>refresh token</b>, получаемого обычным способом — 1 месяц.   Срок жизни  <b>refresh token</b>, получаемого самостоятельным выписыванием — год.  | |-  > Если мы для вас не завели портфели для ведения торговли в игровом контуре, оставьте заявку на <a href=\"mailto:openapi@alor.ru\">openapi@alor.ru</a> или свяжитесь с нами в [телеграме](https://t.me/AlorOpenAPI).  </br></br> Тестовый контур: `https://apidev.alor.ru`  Боевой контур: `https://api.alor.ru` 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: openapi@alor.ru
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * RiskRate.h
 *
 * 
 */

#ifndef ALORMODEL_RiskRate_H_
#define ALORMODEL_RiskRate_H_


#include "AlorCppRest/ModelBase.h"

#include "AlorCppRest/model/Exchange.h"
#include <cpprest/details/basic_types.h>

namespace alormodel {


/// <summary>
/// 
/// </summary>
class  RiskRate
    : public ModelBase
{
public:
    RiskRate();
    virtual ~RiskRate();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// RiskRate members

    /// <summary>
    /// Id записи
    /// </summary>
    int64_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(int64_t value);

    /// <summary>
    /// Инструмент
    /// </summary>
    utility::string_t getInstrument() const;
    bool instrumentIsSet() const;
    void unsetInstrument();

    void setInstrument(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Exchange> getExchange() const;
    bool exchangeIsSet() const;
    void unsetExchange();

    void setExchange(const std::shared_ptr<Exchange>& value);

    /// <summary>
    /// Категория риска. 
    /// </summary>
    int32_t getRiskCategoryId() const;
    bool riskCategoryIdIsSet() const;
    void unsetRiskCategoryId();

    void setRiskCategoryId(int32_t value);

    /// <summary>
    /// Id категории бумаги для категоризации. 
    /// </summary>
    double getSecurityRiskCategoryId() const;
    bool securityRiskCategoryIdIsSet() const;
    void unsetSecurityRiskCategoryId();

    void setSecurityRiskCategoryId(double value);

    /// <summary>
    /// Тип актива
    /// </summary>
    utility::string_t getAssetType() const;
    bool assetTypeIsSet() const;
    void unsetAssetType();

    void setAssetType(const utility::string_t& value);

    /// <summary>
    /// Чаще всего будет null. Поле показывает к какому базовому инструменту принадлежит данный инструмент.
    /// </summary>
    utility::string_t getUnderlyingAsset() const;
    bool underlyingAssetIsSet() const;
    void unsetUnderlyingAsset();

    void setUnderlyingAsset(const utility::string_t& value);

    /// <summary>
    /// Чаще всего будет null. Поле показывает к множеству инструменту принадлежит данный инструмент.
    /// </summary>
    utility::string_t getSetName() const;
    bool setNameIsSet() const;
    void unsetSetName();

    void setSetName(const utility::string_t& value);

    /// <summary>
    /// Является ли зависимость инструмента к базовому активу прямой или обратной.
    /// </summary>
    bool isIsDirect() const;
    bool isDirectIsSet() const;
    void unsetIsDirect();

    void setIsDirect(bool value);

    /// <summary>
    /// ISIN инструмента. Если есть.
    /// </summary>
    utility::string_t getIsin() const;
    bool isinIsSet() const;
    void unsetIsin();

    void setIsin(const utility::string_t& value);

    /// <summary>
    /// Код валюты расчетов
    /// </summary>
    utility::string_t getCurrencyCode() const;
    bool currencyCodeIsSet() const;
    void unsetCurrencyCode();

    void setCurrencyCode(const utility::string_t& value);

    /// <summary>
    /// Ставка риска повышения цены. Применяется для шортов.
    /// </summary>
    double getRateUp() const;
    bool rateUpIsSet() const;
    void unsetRateUp();

    void setRateUp(double value);

    /// <summary>
    /// Ставка риска понижения цены. Применяется для лонгов.
    /// </summary>
    double getRateDown() const;
    bool rateDownIsSet() const;
    void unsetRateDown();

    void setRateDown(double value);

    /// <summary>
    /// Симметричная ставка риска. Приведена для справки, не используется
    /// </summary>
    double getRateSymmetric() const;
    bool rateSymmetricIsSet() const;
    void unsetRateSymmetric();

    void setRateSymmetric(double value);

    /// <summary>
    /// Разрешен ли шорт по бумаге. True если да.
    /// </summary>
    bool isIsShortSellPossible() const;
    bool isShortSellPossibleIsSet() const;
    void unsetIsShortSellPossible();

    void setIsShortSellPossible(bool value);

    /// <summary>
    /// Доступен ли данный инструмент в маржу. Т.е. есть ли он в списке маржинальных инструментов брокера.
    /// </summary>
    bool isIsMarginal() const;
    bool isMarginalIsSet() const;
    void unsetIsMarginal();

    void setIsMarginal(bool value);

    /// <summary>
    /// Ставка риска множества
    /// </summary>
    double getSetRate() const;
    bool setRateIsSet() const;
    void unsetSetRate();

    void setSetRate(double value);

    /// <summary>
    /// Время добавления ставки риска
    /// </summary>
    utility::string_t getCreatedAt() const;
    bool createdAtIsSet() const;
    void unsetCreatedAt();

    void setCreatedAt(const utility::string_t& value);

    /// <summary>
    /// Время последнего обновления ставки риска
    /// </summary>
    utility::datetime getUpdatedAt() const;
    bool updatedAtIsSet() const;
    void unsetUpdatedAt();

    void setUpdatedAt(const utility::datetime& value);


protected:
    int64_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Instrument;
    bool m_InstrumentIsSet;
    std::shared_ptr<Exchange> m_Exchange;
    bool m_ExchangeIsSet;
    int32_t m_RiskCategoryId;
    bool m_RiskCategoryIdIsSet;
    double m_SecurityRiskCategoryId;
    bool m_SecurityRiskCategoryIdIsSet;
    utility::string_t m_AssetType;
    bool m_AssetTypeIsSet;
    utility::string_t m_UnderlyingAsset;
    bool m_UnderlyingAssetIsSet;
    utility::string_t m_SetName;
    bool m_SetNameIsSet;
    bool m_IsDirect;
    bool m_IsDirectIsSet;
    utility::string_t m_Isin;
    bool m_IsinIsSet;
    utility::string_t m_CurrencyCode;
    bool m_CurrencyCodeIsSet;
    double m_RateUp;
    bool m_RateUpIsSet;
    double m_RateDown;
    bool m_RateDownIsSet;
    double m_RateSymmetric;
    bool m_RateSymmetricIsSet;
    bool m_IsShortSellPossible;
    bool m_IsShortSellPossibleIsSet;
    bool m_IsMarginal;
    bool m_IsMarginalIsSet;
    double m_SetRate;
    bool m_SetRateIsSet;
    utility::string_t m_CreatedAt;
    bool m_CreatedAtIsSet;
    utility::datetime m_UpdatedAt;
    bool m_UpdatedAtIsSet;
};


}

#endif /* ALORMODEL_RiskRate_H_ */

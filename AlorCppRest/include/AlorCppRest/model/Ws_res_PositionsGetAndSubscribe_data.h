/**
 * Alor OpenAPI V2
 * API для работы с торговой системой АЛОР Брокер. Предоставляет интерфейсы для выставления заявок и получения биржевой информации.  Данные для неавторизованных запросов предоставляются с задержкой от 15 минут, для авторизованных - без задержек.   Публичная биржевая информация может быть получена через HTTP(S) API, а также доступна через однократно установленное WebSocket соединение. <br> **Внимание!** WebSocket соединения могут и будут разрываться *(например, если клиент не успевает обрабатывать сообщения и на стороне API в буфере накопится более 5000 событий)*. <br> Во внешнем ПО необходимо предусмотреть механизмы переподключения и переподписки (при необходимости)! <br> <br>  В OpenAPI V2 доступны \"Московская Биржа\" (MOEX) и \"Биржа СПБ\" (SPBX).   <h4> Доступные типы данных </h4>  * Все сделки  * Все заявки  * Информация по инструментам  * Котировки  * Биржевые стаканы  * Исторические данные  * Позиции  * Информация о клиенте  <h4>Поддерживаемые виды заявок</h4>  * рыночные  * лимитные  * стоп-лосс  * тейк-профит  * стоп-лосс лимит  * тейк-профит лимит  <h4>    Ограничения по частоте запросов     </h4> <p>На текущий момент ограничений по количеству запросов в минуту нет, однако есть ограничение на общее количество подписок (сотни тысяч). При достижении лимита подписок клиент будет заблокирован и в течение нескольких минут не сможет создавать новые подписки. Уже существующие подписки продолжат работать. <br/>  Сервер может обрабатывать \"тяжелые\" запросы (пример - история за все время) и запросы без авторизации с меньшим приоритетом.<br/> </p>  <h4>Получение списка портфелей</h4> <p>Получить список доступных портфелей можно из JWT токена</p> <p>Для получения списка доступных портфелей необходимо декодировать JWT токен. Портфели находятся в поле <b>portfolios</b>.</p> <br/>  <h2> Авторизация </h2>  <h4>OAuth</h4>  <b>Внимание!</b>   JWT и refresh token — равносильны логину и паролю. Их нужно скрывать от публичного доступа.  <h4>Для разработчиков сторонних приложений, в которых торговлю будут вести их пользователи.</h4>  Мы предоставляем сервис для авторизации сторониих приложений по стандарту OAuth 2.0. С примером приложения, использующего OAuth сервис для авторизации пользователей можно ознакомиться в разделе  <a href=\"/examples\">Примеры</a>.  Список разрешений (scopes), которые могут быть выданы приложению: <table>   <tr>     <td><b>OrdersRead</b></td>     <td>Чтение выставленных заявок</td>   </tr>   <tr>     <td><b>OrdersCreate</b></td>     <td>Выставление заявок</td>   </tr>   <tr>     <td><b>Trades</b></td>     <td>Чтение совершенных сделок</td>   </tr>   <tr>     <td><b>Personal</b></td>     <td>Персональная информация: ФИО, почта и т.п.</td>   </tr>   <tr>     <td><b>Stats</b></td>     <td>Статистика: прибыль, средние цены и т.п.</td>   </tr> </table>  <h4>Для ведения операций от своего имени</h4>  Выписать себе <b>refresh token</b> для ведения операций от своего имени [можно здесь](https://alor.dev/open-api-tokens).  <h2>Краткое описание работы с авторизацией</h2>  Чтобы выполнить авторизованный запрос, добавьте в запрос заголовок с именем \"Authorization\" и значением, состоящим из префикса `\"Bearer \"` и валидного JWT токена.  Срок жизни JWT короткий: это сделано для безопасности.  Для большинства вариантов использования API мы рекоммендуем использовать механизм  <b>refresh token</b> .  Механизм  <b>refresh token</b>  позволяет получать JWT с новым сроком жизни. Для этого отправьте POST запрос на адрес `https://oauthdev.alor.ru/refresh?token={refreshToken}` *(тестовый контур)* или `https://oauth.alor.ru/refresh?token={refreshToken}` *(боевой контур)*. Если у  <b>refresh token</b>  не истек срок жизни и не он не был отозван, то в теле ответа в поле AccessToken вернётся свежий JWT токен.   Срок жизни  <b>refresh token</b>, получаемого обычным способом — 1 месяц.   Срок жизни  <b>refresh token</b>, получаемого самостоятельным выписыванием — год.  | |-  > Если мы для вас не завели портфели для ведения торговли в игровом контуре, оставьте заявку на <a href=\"mailto:openapi@alor.ru\">openapi@alor.ru</a> или свяжитесь с нами в [телеграме](https://t.me/AlorOpenAPI).  </br></br> Тестовый контур: `https://apidev.alor.ru`  Боевой контур: `https://api.alor.ru` 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: openapi@alor.ru
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Ws_res_PositionsGetAndSubscribe_data.h
 *
 * Сообщение с данными о позициях по ценным бумагам и валютным остаткам
 */

#ifndef ALORMODEL_Ws_res_PositionsGetAndSubscribe_data_H_
#define ALORMODEL_Ws_res_PositionsGetAndSubscribe_data_H_


#include "AlorCppRest/ModelBase.h"

#include "AlorCppRest/model/Exchange.h"
#include <cpprest/details/basic_types.h>

namespace alormodel {


/// <summary>
/// Сообщение с данными о позициях по ценным бумагам и валютным остаткам
/// </summary>
class  Ws_res_PositionsGetAndSubscribe_data
    : public ModelBase
{
public:
    Ws_res_PositionsGetAndSubscribe_data();
    virtual ~Ws_res_PositionsGetAndSubscribe_data();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Ws_res_PositionsGetAndSubscribe_data members

    /// <summary>
    /// Тикер (Код финансового инструмента)
    /// </summary>
    utility::string_t getSymbol() const;
    bool symbolIsSet() const;
    void unsetSymbol();

    void setSymbol(const utility::string_t& value);

    /// <summary>
    /// Биржа:Тикер
    /// </summary>
    utility::string_t getBrokerSymbol() const;
    bool brokerSymbolIsSet() const;
    void unsetBrokerSymbol();

    void setBrokerSymbol(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Exchange> getExchange() const;
    bool exchangeIsSet() const;
    void unsetExchange();

    void setExchange(const std::shared_ptr<Exchange>& value);

    /// <summary>
    /// Объём, расчитанный по средней цене
    /// </summary>
    double getVolume() const;
    bool volumeIsSet() const;
    void unsetVolume();

    void setVolume(double value);

    /// <summary>
    /// Объём, расчитанный по текущей цене
    /// </summary>
    double getCurrentVolume() const;
    bool currentVolumeIsSet() const;
    void unsetCurrentVolume();

    void setCurrentVolume(double value);

    /// <summary>
    /// Средняя цена сделок по позициям
    /// </summary>
    double getAvgPrice() const;
    bool avgPriceIsSet() const;
    void unsetAvgPrice();

    void setAvgPrice(double value);

    /// <summary>
    /// Количество (штуки)
    /// </summary>
    int32_t getQtyUnits() const;
    bool qtyUnitsIsSet() const;
    void unsetQtyUnits();

    void setQtyUnits(int32_t value);

    /// <summary>
    /// Позиций на момент открытия (штуки)
    /// </summary>
    int32_t getOpenUnits() const;
    bool openUnitsIsSet() const;
    void unsetOpenUnits();

    void setOpenUnits(int32_t value);

    /// <summary>
    /// Размер лота
    /// </summary>
    double getLotSize() const;
    bool lotSizeIsSet() const;
    void unsetLotSize();

    void setLotSize(double value);

    /// <summary>
    /// Наименование инструмента
    /// </summary>
    utility::string_t getShortName() const;
    bool shortNameIsSet() const;
    void unsetShortName();

    void setShortName(const utility::string_t& value);

    /// <summary>
    /// Количество на дату \&quot;Т0\&quot; (штуки)
    /// </summary>
    int32_t getQtyT0() const;
    bool qtyT0IsSet() const;
    void unsetQtyT0();

    void setQtyT0(int32_t value);

    /// <summary>
    /// Количество на дату \&quot;Т1\&quot; (штуки)
    /// </summary>
    int32_t getQtyT1() const;
    bool qtyT1IsSet() const;
    void unsetQtyT1();

    void setQtyT1(int32_t value);

    /// <summary>
    /// Количество на дату \&quot;Т2\&quot; (штуки)
    /// </summary>
    int32_t getQtyT2() const;
    bool qtyT2IsSet() const;
    void unsetQtyT2();

    void setQtyT2(int32_t value);

    /// <summary>
    /// Количество на дату \&quot;TFuture\&quot; (штуки)
    /// </summary>
    int32_t getQtyTFuture() const;
    bool qtyTFutureIsSet() const;
    void unsetQtyTFuture();

    void setQtyTFuture(int32_t value);

    /// <summary>
    /// Количество на дату \&quot;Т0\&quot; (лоты)
    /// </summary>
    int32_t getQtyT0Batch() const;
    bool qtyT0BatchIsSet() const;
    void unsetQtyT0Batch();

    void setQtyT0Batch(int32_t value);

    /// <summary>
    /// Количество на дату \&quot;Т1\&quot; (лоты)
    /// </summary>
    int32_t getQtyT1Batch() const;
    bool qtyT1BatchIsSet() const;
    void unsetQtyT1Batch();

    void setQtyT1Batch(int32_t value);

    /// <summary>
    /// Количество на дату \&quot;Т2\&quot; (лоты)
    /// </summary>
    int32_t getQtyT2Batch() const;
    bool qtyT2BatchIsSet() const;
    void unsetQtyT2Batch();

    void setQtyT2Batch(int32_t value);

    /// <summary>
    /// Количество на дату \&quot;TFuture\&quot; (лоты)
    /// </summary>
    int32_t getQtyTFutureBatch() const;
    bool qtyTFutureBatchIsSet() const;
    void unsetQtyTFutureBatch();

    void setQtyTFutureBatch(int32_t value);

    /// <summary>
    /// Количество (лоты)
    /// </summary>
    int32_t getQtyBatch() const;
    bool qtyBatchIsSet() const;
    void unsetQtyBatch();

    void setQtyBatch(int32_t value);

    /// <summary>
    /// Позиции на момент открытия (начала торгов)
    /// </summary>
    int32_t getOpenQtyBatch() const;
    bool openQtyBatchIsSet() const;
    void unsetOpenQtyBatch();

    void setOpenQtyBatch(int32_t value);

    /// <summary>
    /// Количество (лоты)
    /// </summary>
    int32_t getQty() const;
    bool qtyIsSet() const;
    void unsetQty();

    void setQty(int32_t value);

    /// <summary>
    /// Позиции на момент открытия (начала торгов)
    /// </summary>
    int32_t getOpen() const;
    bool openIsSet() const;
    void unsetOpen();

    void setOpen(int32_t value);

    /// <summary>
    /// Нереализованная прибыль за день
    /// </summary>
    double getDailyUnrealisedPl() const;
    bool dailyUnrealisedPlIsSet() const;
    void unsetDailyUnrealisedPl();

    void setDailyUnrealisedPl(double value);

    /// <summary>
    /// Нереализованная прибыль
    /// </summary>
    double getUnrealisedPl() const;
    bool unrealisedPlIsSet() const;
    void unsetUnrealisedPl();

    void setUnrealisedPl(double value);

    /// <summary>
    /// True для валютных остатков (денег), false - для торговых инструментов
    /// </summary>
    bool isIsCurrency() const;
    bool isCurrencyIsSet() const;
    void unsetIsCurrency();

    void setIsCurrency(bool value);


protected:
    utility::string_t m_Symbol;
    bool m_SymbolIsSet;
    utility::string_t m_BrokerSymbol;
    bool m_BrokerSymbolIsSet;
    std::shared_ptr<Exchange> m_Exchange;
    bool m_ExchangeIsSet;
    double m_Volume;
    bool m_VolumeIsSet;
    double m_CurrentVolume;
    bool m_CurrentVolumeIsSet;
    double m_AvgPrice;
    bool m_AvgPriceIsSet;
    int32_t m_QtyUnits;
    bool m_QtyUnitsIsSet;
    int32_t m_OpenUnits;
    bool m_OpenUnitsIsSet;
    double m_LotSize;
    bool m_LotSizeIsSet;
    utility::string_t m_ShortName;
    bool m_ShortNameIsSet;
    int32_t m_QtyT0;
    bool m_QtyT0IsSet;
    int32_t m_QtyT1;
    bool m_QtyT1IsSet;
    int32_t m_QtyT2;
    bool m_QtyT2IsSet;
    int32_t m_QtyTFuture;
    bool m_QtyTFutureIsSet;
    int32_t m_QtyT0Batch;
    bool m_QtyT0BatchIsSet;
    int32_t m_QtyT1Batch;
    bool m_QtyT1BatchIsSet;
    int32_t m_QtyT2Batch;
    bool m_QtyT2BatchIsSet;
    int32_t m_QtyTFutureBatch;
    bool m_QtyTFutureBatchIsSet;
    int32_t m_QtyBatch;
    bool m_QtyBatchIsSet;
    int32_t m_OpenQtyBatch;
    bool m_OpenQtyBatchIsSet;
    int32_t m_Qty;
    bool m_QtyIsSet;
    int32_t m_Open;
    bool m_OpenIsSet;
    double m_DailyUnrealisedPl;
    bool m_DailyUnrealisedPlIsSet;
    double m_UnrealisedPl;
    bool m_UnrealisedPlIsSet;
    bool m_IsCurrency;
    bool m_IsCurrencyIsSet;
};


}

#endif /* ALORMODEL_Ws_res_PositionsGetAndSubscribe_data_H_ */
